<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="790.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="773" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="773" > </text>
<g id="frames">
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (215 samples, 0.25%)</title><rect x="298.7" y="581" width="2.9" height="15.0" fill="rgb(248,31,54)" rx="2" ry="2" />
<text  x="301.71" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::destroy&lt;int&gt; (75 samples, 0.09%)</title><rect x="331.4" y="597" width="1.0" height="15.0" fill="rgb(213,47,16)" rx="2" ry="2" />
<text  x="334.40" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (442 samples, 0.51%)</title><rect x="975.4" y="629" width="6.1" height="15.0" fill="rgb(234,25,15)" rx="2" ry="2" />
<text  x="978.45" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::operator (1,670 samples, 1.93%)</title><rect x="1066.7" y="629" width="22.8" height="15.0" fill="rgb(241,208,30)" rx="2" ry="2" />
<text  x="1069.68" y="639.5" >s..</text>
</g>
<g >
<title>QuickSort (6,030 samples, 6.97%)</title><rect x="61.6" y="453" width="82.2" height="15.0" fill="rgb(247,197,42)" rx="2" ry="2" />
<text  x="64.58" y="463.5" >QuickSort</text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (10 samples, 0.01%)</title><rect x="169.6" y="645" width="0.2" height="15.0" fill="rgb(247,16,29)" rx="2" ry="2" />
<text  x="172.63" y="655.5" ></text>
</g>
<g >
<title>__random_r (10 samples, 0.01%)</title><rect x="126.0" y="341" width="0.2" height="15.0" fill="rgb(225,83,21)" rx="2" ry="2" />
<text  x="129.03" y="351.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.04%)</title><rect x="1082.6" y="581" width="0.4" height="15.0" fill="rgb(225,85,28)" rx="2" ry="2" />
<text  x="1085.57" y="591.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (41 samples, 0.05%)</title><rect x="309.7" y="581" width="0.6" height="15.0" fill="rgb(214,91,27)" rx="2" ry="2" />
<text  x="312.73" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (21 samples, 0.02%)</title><rect x="338.1" y="613" width="0.3" height="15.0" fill="rgb(211,125,42)" rx="2" ry="2" />
<text  x="341.12" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (12 samples, 0.01%)</title><rect x="267.8" y="597" width="0.2" height="15.0" fill="rgb(239,205,30)" rx="2" ry="2" />
<text  x="270.83" y="607.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (31 samples, 0.04%)</title><rect x="1089.0" y="613" width="0.5" height="15.0" fill="rgb(214,23,17)" rx="2" ry="2" />
<text  x="1092.03" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (17 samples, 0.02%)</title><rect x="349.8" y="629" width="0.3" height="15.0" fill="rgb(208,204,50)" rx="2" ry="2" />
<text  x="352.82" y="639.5" ></text>
</g>
<g >
<title>RandomPivot (15 samples, 0.02%)</title><rect x="131.4" y="373" width="0.2" height="15.0" fill="rgb(240,63,8)" rx="2" ry="2" />
<text  x="134.43" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::deallocate (59 samples, 0.07%)</title><rect x="324.1" y="565" width="0.8" height="15.0" fill="rgb(237,161,36)" rx="2" ry="2" />
<text  x="327.06" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (27 samples, 0.03%)</title><rect x="1089.7" y="629" width="0.3" height="15.0" fill="rgb(243,75,15)" rx="2" ry="2" />
<text  x="1092.66" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_S_cget (13 samples, 0.02%)</title><rect x="302.2" y="581" width="0.1" height="15.0" fill="rgb(230,180,23)" rx="2" ry="2" />
<text  x="305.17" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (16 samples, 0.02%)</title><rect x="1097.4" y="645" width="0.2" height="15.0" fill="rgb(210,32,29)" rx="2" ry="2" />
<text  x="1100.38" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7,149 samples, 8.26%)</title><rect x="412.7" y="629" width="97.5" height="15.0" fill="rgb(249,158,6)" rx="2" ry="2" />
<text  x="415.66" y="639.5" >std::__deta..</text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (15 samples, 0.02%)</title><rect x="1065.7" y="597" width="0.2" height="15.0" fill="rgb(207,107,4)" rx="2" ry="2" />
<text  x="1068.66" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (20 samples, 0.02%)</title><rect x="1050.3" y="565" width="0.3" height="15.0" fill="rgb(228,112,50)" rx="2" ry="2" />
<text  x="1053.34" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (14 samples, 0.02%)</title><rect x="102.8" y="133" width="0.2" height="15.0" fill="rgb(234,36,8)" rx="2" ry="2" />
<text  x="105.80" y="143.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (8 samples, 0.01%)</title><rect x="103.2" y="149" width="0.1" height="15.0" fill="rgb(217,104,50)" rx="2" ry="2" />
<text  x="106.22" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_S_cget (434 samples, 0.50%)</title><rect x="967.3" y="613" width="5.9" height="15.0" fill="rgb(253,78,28)" rx="2" ry="2" />
<text  x="970.25" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (265 samples, 0.31%)</title><rect x="360.0" y="661" width="3.6" height="15.0" fill="rgb(221,37,53)" rx="2" ry="2" />
<text  x="362.97" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2,559 samples, 2.96%)</title><rect x="946.6" y="645" width="34.9" height="15.0" fill="rgb(212,180,23)" rx="2" ry="2" />
<text  x="949.58" y="655.5" >st..</text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::~unordered_set (9 samples, 0.01%)</title><rect x="1099.5" y="677" width="0.1" height="15.0" fill="rgb(209,48,22)" rx="2" ry="2" />
<text  x="1102.48" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (92 samples, 0.11%)</title><rect x="116.1" y="277" width="1.2" height="15.0" fill="rgb(232,52,10)" rx="2" ry="2" />
<text  x="119.07" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (187 samples, 0.22%)</title><rect x="1009.0" y="629" width="2.6" height="15.0" fill="rgb(230,171,43)" rx="2" ry="2" />
<text  x="1012.04" y="639.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;int*, unsigned long&gt; (55 samples, 0.06%)</title><rect x="1100.4" y="629" width="0.7" height="15.0" fill="rgb(220,136,40)" rx="2" ry="2" />
<text  x="1103.37" y="639.5" ></text>
</g>
<g >
<title>[TestPerf] (9 samples, 0.01%)</title><rect x="1000.4" y="629" width="0.1" height="15.0" fill="rgb(219,188,27)" rx="2" ry="2" />
<text  x="1003.38" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (39 samples, 0.05%)</title><rect x="348.8" y="597" width="0.5" height="15.0" fill="rgb(253,52,27)" rx="2" ry="2" />
<text  x="351.76" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_S_cget (33 samples, 0.04%)</title><rect x="297.9" y="565" width="0.5" height="15.0" fill="rgb(249,114,37)" rx="2" ry="2" />
<text  x="300.91" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (49 samples, 0.06%)</title><rect x="1080.8" y="581" width="0.6" height="15.0" fill="rgb(222,149,44)" rx="2" ry="2" />
<text  x="1083.75" y="591.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (56 samples, 0.06%)</title><rect x="150.9" y="501" width="0.8" height="15.0" fill="rgb(221,101,29)" rx="2" ry="2" />
<text  x="153.93" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_remove_bucket_begin (153 samples, 0.18%)</title><rect x="312.3" y="613" width="2.0" height="15.0" fill="rgb(217,126,11)" rx="2" ry="2" />
<text  x="315.26" y="623.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.01%)</title><rect x="1085.9" y="581" width="0.1" height="15.0" fill="rgb(223,40,28)" rx="2" ry="2" />
<text  x="1088.91" y="591.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (11 samples, 0.01%)</title><rect x="115.9" y="261" width="0.2" height="15.0" fill="rgb(242,205,36)" rx="2" ry="2" />
<text  x="118.92" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::deallocate (43 samples, 0.05%)</title><rect x="330.8" y="597" width="0.6" height="15.0" fill="rgb(218,159,17)" rx="2" ry="2" />
<text  x="333.81" y="607.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (20 samples, 0.02%)</title><rect x="107.6" y="213" width="0.3" height="15.0" fill="rgb(240,92,5)" rx="2" ry="2" />
<text  x="110.63" y="223.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (50 samples, 0.06%)</title><rect x="172.0" y="661" width="0.7" height="15.0" fill="rgb(223,178,33)" rx="2" ry="2" />
<text  x="174.99" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_allocate_buckets (22 samples, 0.03%)</title><rect x="1041.3" y="581" width="0.3" height="15.0" fill="rgb(237,219,27)" rx="2" ry="2" />
<text  x="1044.31" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_node_allocator (81 samples, 0.09%)</title><rect x="321.1" y="581" width="1.1" height="15.0" fill="rgb(233,7,23)" rx="2" ry="2" />
<text  x="324.13" y="591.5" ></text>
</g>
<g >
<title>QuickSort (2,898 samples, 3.35%)</title><rect x="83.2" y="325" width="39.6" height="15.0" fill="rgb(243,206,48)" rx="2" ry="2" />
<text  x="86.23" y="335.5" >Qui..</text>
</g>
<g >
<title>RandomPivot (24 samples, 0.03%)</title><rect x="122.8" y="325" width="0.3" height="15.0" fill="rgb(247,167,25)" rx="2" ry="2" />
<text  x="125.75" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (44 samples, 0.05%)</title><rect x="1045.3" y="565" width="0.6" height="15.0" fill="rgb(220,30,11)" rx="2" ry="2" />
<text  x="1048.35" y="575.5" ></text>
</g>
<g >
<title>__random (11 samples, 0.01%)</title><rect x="108.9" y="229" width="0.1" height="15.0" fill="rgb(237,49,21)" rx="2" ry="2" />
<text  x="111.88" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (50 samples, 0.06%)</title><rect x="920.0" y="597" width="0.7" height="15.0" fill="rgb(217,126,53)" rx="2" ry="2" />
<text  x="923.03" y="607.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::insert (21 samples, 0.02%)</title><rect x="1111.1" y="693" width="0.3" height="15.0" fill="rgb(242,123,36)" rx="2" ry="2" />
<text  x="1114.07" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (45,488 samples, 52.58%)</title><rect x="367.2" y="661" width="620.4" height="15.0" fill="rgb(249,33,40)" rx="2" ry="2" />
<text  x="370.16" y="671.5" >std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_t..</text>
</g>
<g >
<title>std::__detail::_Identity::operator (113 samples, 0.13%)</title><rect x="1050.6" y="565" width="1.6" height="15.0" fill="rgb(208,105,33)" rx="2" ry="2" />
<text  x="1053.61" y="575.5" ></text>
</g>
<g >
<title>QuickSort (6,346 samples, 7.33%)</title><rect x="59.4" y="469" width="86.6" height="15.0" fill="rgb(221,112,24)" rx="2" ry="2" />
<text  x="62.44" y="479.5" >QuickSort</text>
</g>
<g >
<title>std::swap&lt;int&gt; (41 samples, 0.05%)</title><rect x="163.9" y="597" width="0.6" height="15.0" fill="rgb(254,7,36)" rx="2" ry="2" />
<text  x="166.90" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (117 samples, 0.14%)</title><rect x="162.2" y="581" width="1.6" height="15.0" fill="rgb(209,2,50)" rx="2" ry="2" />
<text  x="165.21" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (128 samples, 0.15%)</title><rect x="146.7" y="469" width="1.7" height="15.0" fill="rgb(252,210,45)" rx="2" ry="2" />
<text  x="149.70" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (758 samples, 0.88%)</title><rect x="962.8" y="629" width="10.4" height="15.0" fill="rgb(240,39,16)" rx="2" ry="2" />
<text  x="965.83" y="639.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (41 samples, 0.05%)</title><rect x="159.4" y="565" width="0.6" height="15.0" fill="rgb(238,177,16)" rx="2" ry="2" />
<text  x="162.44" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (265 samples, 0.31%)</title><rect x="220.7" y="677" width="3.6" height="15.0" fill="rgb(215,75,9)" rx="2" ry="2" />
<text  x="223.71" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (21 samples, 0.02%)</title><rect x="993.9" y="645" width="0.3" height="15.0" fill="rgb(211,29,2)" rx="2" ry="2" />
<text  x="996.90" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (38 samples, 0.04%)</title><rect x="1036.0" y="581" width="0.5" height="15.0" fill="rgb(223,59,13)" rx="2" ry="2" />
<text  x="1038.96" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (37 samples, 0.04%)</title><rect x="1002.3" y="597" width="0.5" height="15.0" fill="rgb(253,113,22)" rx="2" ry="2" />
<text  x="1005.30" y="607.5" ></text>
</g>
<g >
<title>std::__to_address&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; (30 samples, 0.03%)</title><rect x="1079.9" y="597" width="0.4" height="15.0" fill="rgb(240,221,44)" rx="2" ry="2" />
<text  x="1082.91" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (138 samples, 0.16%)</title><rect x="341.9" y="565" width="1.8" height="15.0" fill="rgb(217,52,26)" rx="2" ry="2" />
<text  x="344.86" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (90 samples, 0.10%)</title><rect x="164.5" y="597" width="1.2" height="15.0" fill="rgb(205,228,3)" rx="2" ry="2" />
<text  x="167.46" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (33 samples, 0.04%)</title><rect x="1061.6" y="581" width="0.5" height="15.0" fill="rgb(209,127,30)" rx="2" ry="2" />
<text  x="1064.60" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (188 samples, 0.22%)</title><rect x="341.2" y="581" width="2.5" height="15.0" fill="rgb(214,187,24)" rx="2" ry="2" />
<text  x="344.18" y="591.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (9 samples, 0.01%)</title><rect x="144.4" y="437" width="0.1" height="15.0" fill="rgb(216,22,34)" rx="2" ry="2" />
<text  x="147.36" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_node_allocator (110 samples, 0.13%)</title><rect x="1078.2" y="597" width="1.5" height="15.0" fill="rgb(246,1,0)" rx="2" ry="2" />
<text  x="1081.16" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_state (8 samples, 0.01%)</title><rect x="1094.9" y="629" width="0.1" height="15.0" fill="rgb(233,28,10)" rx="2" ry="2" />
<text  x="1097.91" y="639.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; (34 samples, 0.04%)</title><rect x="329.4" y="549" width="0.5" height="15.0" fill="rgb(210,196,38)" rx="2" ry="2" />
<text  x="332.43" y="559.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (11 samples, 0.01%)</title><rect x="137.5" y="389" width="0.1" height="15.0" fill="rgb(221,224,1)" rx="2" ry="2" />
<text  x="140.45" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (106 samples, 0.12%)</title><rect x="168.2" y="629" width="1.4" height="15.0" fill="rgb(207,164,48)" rx="2" ry="2" />
<text  x="171.18" y="639.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (82 samples, 0.09%)</title><rect x="302.9" y="565" width="1.1" height="15.0" fill="rgb(240,201,1)" rx="2" ry="2" />
<text  x="305.91" y="575.5" ></text>
</g>
<g >
<title>QuickSort (955 samples, 1.10%)</title><rect x="95.4" y="229" width="13.0" height="15.0" fill="rgb(216,52,41)" rx="2" ry="2" />
<text  x="98.42" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (113 samples, 0.13%)</title><rect x="1025.1" y="549" width="1.6" height="15.0" fill="rgb(250,197,37)" rx="2" ry="2" />
<text  x="1028.13" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (602 samples, 0.70%)</title><rect x="265.9" y="613" width="8.2" height="15.0" fill="rgb(218,97,41)" rx="2" ry="2" />
<text  x="268.92" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (106 samples, 0.12%)</title><rect x="172.7" y="661" width="1.4" height="15.0" fill="rgb(232,216,7)" rx="2" ry="2" />
<text  x="175.67" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (22 samples, 0.03%)</title><rect x="1008.4" y="613" width="0.3" height="15.0" fill="rgb(205,139,50)" rx="2" ry="2" />
<text  x="1011.39" y="623.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (29 samples, 0.03%)</title><rect x="111.0" y="245" width="0.4" height="15.0" fill="rgb(235,116,14)" rx="2" ry="2" />
<text  x="114.02" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::erase (6,907 samples, 7.98%)</title><rect x="259.1" y="661" width="94.2" height="15.0" fill="rgb(208,102,4)" rx="2" ry="2" />
<text  x="262.09" y="671.5" >std::_Hasht..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (31 samples, 0.04%)</title><rect x="1049.4" y="565" width="0.4" height="15.0" fill="rgb(247,97,21)" rx="2" ry="2" />
<text  x="1052.40" y="575.5" ></text>
</g>
<g >
<title>std::__to_address&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; (9 samples, 0.01%)</title><rect x="1088.3" y="613" width="0.1" height="15.0" fill="rgb(218,28,49)" rx="2" ry="2" />
<text  x="1091.30" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (55 samples, 0.06%)</title><rect x="1100.4" y="677" width="0.7" height="15.0" fill="rgb(228,224,40)" rx="2" ry="2" />
<text  x="1103.37" y="687.5" ></text>
</g>
<g >
<title>RandomPivot (18 samples, 0.02%)</title><rect x="128.6" y="357" width="0.2" height="15.0" fill="rgb(212,104,13)" rx="2" ry="2" />
<text  x="131.56" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (32 samples, 0.04%)</title><rect x="903.5" y="581" width="0.5" height="15.0" fill="rgb(216,117,21)" rx="2" ry="2" />
<text  x="906.53" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_erase (6,757 samples, 7.81%)</title><rect x="260.6" y="645" width="92.2" height="15.0" fill="rgb(251,11,30)" rx="2" ry="2" />
<text  x="263.63" y="655.5" >std::_Hasht..</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (450 samples, 0.52%)</title><rect x="268.0" y="597" width="6.1" height="15.0" fill="rgb(245,13,36)" rx="2" ry="2" />
<text  x="270.99" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_store_code (15 samples, 0.02%)</title><rect x="1065.0" y="613" width="0.2" height="15.0" fill="rgb(234,54,45)" rx="2" ry="2" />
<text  x="1067.99" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (14 samples, 0.02%)</title><rect x="1047.8" y="533" width="0.2" height="15.0" fill="rgb(218,92,37)" rx="2" ry="2" />
<text  x="1050.76" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (126 samples, 0.15%)</title><rect x="985.8" y="645" width="1.8" height="15.0" fill="rgb(244,183,45)" rx="2" ry="2" />
<text  x="988.84" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (77 samples, 0.09%)</title><rect x="1027.5" y="565" width="1.0" height="15.0" fill="rgb(226,49,45)" rx="2" ry="2" />
<text  x="1030.49" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_node_allocator (15 samples, 0.02%)</title><rect x="333.4" y="613" width="0.2" height="15.0" fill="rgb(217,54,12)" rx="2" ry="2" />
<text  x="336.36" y="623.5" ></text>
</g>
<g >
<title>QuickSort (4,939 samples, 5.71%)</title><rect x="69.3" y="405" width="67.3" height="15.0" fill="rgb(217,156,35)" rx="2" ry="2" />
<text  x="72.26" y="415.5" >QuickSort</text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (47 samples, 0.05%)</title><rect x="1048.8" y="517" width="0.6" height="15.0" fill="rgb(230,69,27)" rx="2" ry="2" />
<text  x="1051.76" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (10 samples, 0.01%)</title><rect x="298.6" y="565" width="0.1" height="15.0" fill="rgb(212,177,23)" rx="2" ry="2" />
<text  x="301.57" y="575.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (10 samples, 0.01%)</title><rect x="897.6" y="565" width="0.1" height="15.0" fill="rgb(250,154,52)" rx="2" ry="2" />
<text  x="900.61" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (24 samples, 0.03%)</title><rect x="1094.3" y="629" width="0.3" height="15.0" fill="rgb(237,59,5)" rx="2" ry="2" />
<text  x="1097.27" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (733 samples, 0.85%)</title><rect x="264.6" y="629" width="10.0" height="15.0" fill="rgb(224,117,26)" rx="2" ry="2" />
<text  x="267.60" y="639.5" ></text>
</g>
<g >
<title>QuickSort (10,146 samples, 11.73%)</title><rect x="33.5" y="661" width="138.4" height="15.0" fill="rgb(239,217,46)" rx="2" ry="2" />
<text  x="36.51" y="671.5" >QuickSort</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, unsigned long, false&gt;::_S_equals (553 samples, 0.64%)</title><rect x="339.5" y="597" width="7.5" height="15.0" fill="rgb(236,106,13)" rx="2" ry="2" />
<text  x="342.47" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (9 samples, 0.01%)</title><rect x="1035.8" y="581" width="0.2" height="15.0" fill="rgb(236,171,2)" rx="2" ry="2" />
<text  x="1038.84" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (193 samples, 0.22%)</title><rect x="1090.2" y="629" width="2.6" height="15.0" fill="rgb(247,63,23)" rx="2" ry="2" />
<text  x="1093.19" y="639.5" ></text>
</g>
<g >
<title>QuickSort (8,900 samples, 10.29%)</title><rect x="42.4" y="597" width="121.4" height="15.0" fill="rgb(229,188,18)" rx="2" ry="2" />
<text  x="45.42" y="607.5" >QuickSort</text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (649 samples, 0.75%)</title><rect x="928.8" y="629" width="8.8" height="15.0" fill="rgb(205,81,50)" rx="2" ry="2" />
<text  x="931.79" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (22 samples, 0.03%)</title><rect x="1094.6" y="629" width="0.3" height="15.0" fill="rgb(216,9,27)" rx="2" ry="2" />
<text  x="1097.60" y="639.5" ></text>
</g>
<g >
<title>std::addressof&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; (68 samples, 0.08%)</title><rect x="329.0" y="565" width="0.9" height="15.0" fill="rgb(211,125,29)" rx="2" ry="2" />
<text  x="331.97" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (32 samples, 0.04%)</title><rect x="311.1" y="597" width="0.5" height="15.0" fill="rgb(239,113,33)" rx="2" ry="2" />
<text  x="314.13" y="607.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (45 samples, 0.05%)</title><rect x="134.5" y="389" width="0.6" height="15.0" fill="rgb(248,51,17)" rx="2" ry="2" />
<text  x="137.48" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (14 samples, 0.02%)</title><rect x="349.6" y="629" width="0.2" height="15.0" fill="rgb(226,226,9)" rx="2" ry="2" />
<text  x="352.63" y="639.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (8 samples, 0.01%)</title><rect x="123.3" y="325" width="0.1" height="15.0" fill="rgb(205,3,33)" rx="2" ry="2" />
<text  x="126.32" y="335.5" ></text>
</g>
<g >
<title>malloc (75 samples, 0.09%)</title><rect x="1081.5" y="581" width="1.1" height="15.0" fill="rgb(220,163,30)" rx="2" ry="2" />
<text  x="1084.54" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Identity, true&gt;::_S_get (9 samples, 0.01%)</title><rect x="1089.9" y="613" width="0.1" height="15.0" fill="rgb(252,55,45)" rx="2" ry="2" />
<text  x="1092.90" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (39 samples, 0.05%)</title><rect x="343.2" y="533" width="0.5" height="15.0" fill="rgb(233,56,33)" rx="2" ry="2" />
<text  x="346.21" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::destroy&lt;int&gt; (28 samples, 0.03%)</title><rect x="334.4" y="613" width="0.4" height="15.0" fill="rgb(215,222,32)" rx="2" ry="2" />
<text  x="337.41" y="623.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (91 samples, 0.11%)</title><rect x="1050.9" y="549" width="1.3" height="15.0" fill="rgb(227,39,40)" rx="2" ry="2" />
<text  x="1053.91" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (15 samples, 0.02%)</title><rect x="1111.4" y="693" width="0.2" height="15.0" fill="rgb(247,184,34)" rx="2" ry="2" />
<text  x="1114.36" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node (11 samples, 0.01%)</title><rect x="352.1" y="629" width="0.2" height="15.0" fill="rgb(212,89,30)" rx="2" ry="2" />
<text  x="355.13" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (23 samples, 0.03%)</title><rect x="903.2" y="533" width="0.3" height="15.0" fill="rgb(250,5,29)" rx="2" ry="2" />
<text  x="906.22" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (35 samples, 0.04%)</title><rect x="301.2" y="533" width="0.4" height="15.0" fill="rgb(207,200,28)" rx="2" ry="2" />
<text  x="304.16" y="543.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (14 samples, 0.02%)</title><rect x="121.2" y="293" width="0.2" height="15.0" fill="rgb(230,81,0)" rx="2" ry="2" />
<text  x="124.17" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (124 samples, 0.14%)</title><rect x="151.7" y="501" width="1.7" height="15.0" fill="rgb(231,62,52)" rx="2" ry="2" />
<text  x="154.69" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_conjure_hashtable (18 samples, 0.02%)</title><rect x="992.6" y="661" width="0.2" height="15.0" fill="rgb(227,112,2)" rx="2" ry="2" />
<text  x="995.57" y="671.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (50 samples, 0.06%)</title><rect x="1027.9" y="549" width="0.6" height="15.0" fill="rgb(206,105,24)" rx="2" ry="2" />
<text  x="1030.86" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (12 samples, 0.01%)</title><rect x="1045.8" y="549" width="0.1" height="15.0" fill="rgb(236,205,6)" rx="2" ry="2" />
<text  x="1048.78" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (63 samples, 0.07%)</title><rect x="317.8" y="597" width="0.8" height="15.0" fill="rgb(231,108,6)" rx="2" ry="2" />
<text  x="320.79" y="607.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (12 samples, 0.01%)</title><rect x="897.6" y="581" width="0.2" height="15.0" fill="rgb(212,40,35)" rx="2" ry="2" />
<text  x="900.61" y="591.5" ></text>
</g>
<g >
<title>std::__detail::operator==&lt;int, false&gt; (146 samples, 0.17%)</title><rect x="1101.1" y="693" width="2.0" height="15.0" fill="rgb(221,54,7)" rx="2" ry="2" />
<text  x="1104.12" y="703.5" ></text>
</g>
<g >
<title>RandomPivot (30 samples, 0.03%)</title><rect x="110.2" y="245" width="0.4" height="15.0" fill="rgb(216,66,16)" rx="2" ry="2" />
<text  x="113.16" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Identity, true&gt;::_S_cget (16 samples, 0.02%)</title><rect x="1049.8" y="565" width="0.2" height="15.0" fill="rgb(245,69,40)" rx="2" ry="2" />
<text  x="1052.82" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (539 samples, 0.62%)</title><rect x="1052.2" y="565" width="7.3" height="15.0" fill="rgb(219,120,13)" rx="2" ry="2" />
<text  x="1055.15" y="575.5" ></text>
</g>
<g >
<title>RandomPivot (26 samples, 0.03%)</title><rect x="112.1" y="261" width="0.3" height="15.0" fill="rgb(243,212,35)" rx="2" ry="2" />
<text  x="115.07" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (158 samples, 0.18%)</title><rect x="299.5" y="565" width="2.1" height="15.0" fill="rgb(222,141,54)" rx="2" ry="2" />
<text  x="302.48" y="575.5" ></text>
</g>
<g >
<title>RandomPivot (157 samples, 0.18%)</title><rect x="11.9" y="693" width="2.2" height="15.0" fill="rgb(205,44,33)" rx="2" ry="2" />
<text  x="14.91" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (93 samples, 0.11%)</title><rect x="902.3" y="565" width="1.2" height="15.0" fill="rgb(205,70,16)" rx="2" ry="2" />
<text  x="905.26" y="575.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (9 samples, 0.01%)</title><rect x="153.8" y="501" width="0.1" height="15.0" fill="rgb(207,90,34)" rx="2" ry="2" />
<text  x="156.81" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals (9 samples, 0.01%)</title><rect x="352.3" y="629" width="0.1" height="15.0" fill="rgb(213,28,45)" rx="2" ry="2" />
<text  x="355.28" y="639.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::find (273 samples, 0.32%)</title><rect x="1107.3" y="693" width="3.8" height="15.0" fill="rgb(235,2,50)" rx="2" ry="2" />
<text  x="1110.35" y="703.5" ></text>
</g>
<g >
<title>__random_r (30 samples, 0.03%)</title><rect x="115.0" y="277" width="0.4" height="15.0" fill="rgb(217,7,49)" rx="2" ry="2" />
<text  x="118.02" y="287.5" ></text>
</g>
<g >
<title>RandomPivot (20 samples, 0.02%)</title><rect x="125.7" y="341" width="0.2" height="15.0" fill="rgb(223,25,23)" rx="2" ry="2" />
<text  x="128.66" y="351.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (43 samples, 0.05%)</title><rect x="118.0" y="293" width="0.6" height="15.0" fill="rgb(227,122,14)" rx="2" ry="2" />
<text  x="121.03" y="303.5" ></text>
</g>
<g >
<title>__random_r (14 samples, 0.02%)</title><rect x="110.7" y="245" width="0.2" height="15.0" fill="rgb(224,191,41)" rx="2" ry="2" />
<text  x="113.72" y="255.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (9 samples, 0.01%)</title><rect x="155.6" y="533" width="0.1" height="15.0" fill="rgb(215,52,50)" rx="2" ry="2" />
<text  x="158.57" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_allocate_node&lt;int const&amp;&gt; (11 samples, 0.01%)</title><rect x="1092.9" y="629" width="0.2" height="15.0" fill="rgb(215,111,48)" rx="2" ry="2" />
<text  x="1095.93" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (414 samples, 0.48%)</title><rect x="1028.5" y="565" width="5.7" height="15.0" fill="rgb(210,207,8)" rx="2" ry="2" />
<text  x="1031.54" y="575.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;int*, unsigned long, int&gt; (55 samples, 0.06%)</title><rect x="1100.4" y="581" width="0.7" height="15.0" fill="rgb(234,154,41)" rx="2" ry="2" />
<text  x="1103.37" y="591.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (42 samples, 0.05%)</title><rect x="132.0" y="373" width="0.6" height="15.0" fill="rgb(218,201,34)" rx="2" ry="2" />
<text  x="135.00" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_S_cget (17 samples, 0.02%)</title><rect x="1045.1" y="549" width="0.2" height="15.0" fill="rgb(226,146,33)" rx="2" ry="2" />
<text  x="1048.12" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (106 samples, 0.12%)</title><rect x="1048.0" y="533" width="1.4" height="15.0" fill="rgb(223,98,32)" rx="2" ry="2" />
<text  x="1050.95" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (293 samples, 0.34%)</title><rect x="987.6" y="661" width="4.0" height="15.0" fill="rgb(211,229,47)" rx="2" ry="2" />
<text  x="990.56" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (25 samples, 0.03%)</title><rect x="105.0" y="181" width="0.3" height="15.0" fill="rgb(226,155,50)" rx="2" ry="2" />
<text  x="108.01" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals (788 samples, 0.91%)</title><rect x="338.6" y="613" width="10.8" height="15.0" fill="rgb(231,207,3)" rx="2" ry="2" />
<text  x="341.63" y="623.5" ></text>
</g>
<g >
<title>QuickSort (151 samples, 0.17%)</title><rect x="100.5" y="133" width="2.1" height="15.0" fill="rgb(205,182,38)" rx="2" ry="2" />
<text  x="103.52" y="143.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (11 samples, 0.01%)</title><rect x="323.9" y="565" width="0.2" height="15.0" fill="rgb(236,67,5)" rx="2" ry="2" />
<text  x="326.91" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_S_cget (10 samples, 0.01%)</title><rect x="1027.2" y="565" width="0.2" height="15.0" fill="rgb(221,214,48)" rx="2" ry="2" />
<text  x="1030.23" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (370 samples, 0.43%)</title><rect x="425.6" y="597" width="5.0" height="15.0" fill="rgb(231,79,41)" rx="2" ry="2" />
<text  x="428.56" y="607.5" ></text>
</g>
<g >
<title>QuickSort (4,155 samples, 4.80%)</title><rect x="74.8" y="373" width="56.6" height="15.0" fill="rgb(223,17,20)" rx="2" ry="2" />
<text  x="77.76" y="383.5" >QuickS..</text>
</g>
<g >
<title>std::__detail::_Identity::operator (103 samples, 0.12%)</title><rect x="302.6" y="581" width="1.4" height="15.0" fill="rgb(239,54,25)" rx="2" ry="2" />
<text  x="305.62" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::deallocate (404 samples, 0.47%)</title><rect x="322.7" y="581" width="5.5" height="15.0" fill="rgb(216,108,2)" rx="2" ry="2" />
<text  x="325.66" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (83 samples, 0.10%)</title><rect x="904.0" y="581" width="1.1" height="15.0" fill="rgb(223,40,21)" rx="2" ry="2" />
<text  x="906.97" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_erase (4,414 samples, 5.10%)</title><rect x="274.6" y="629" width="60.2" height="15.0" fill="rgb(235,58,27)" rx="2" ry="2" />
<text  x="277.59" y="639.5" >std::_..</text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (12 samples, 0.01%)</title><rect x="351.3" y="613" width="0.2" height="15.0" fill="rgb(248,218,11)" rx="2" ry="2" />
<text  x="354.30" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (56 samples, 0.06%)</title><rect x="1099.6" y="677" width="0.8" height="15.0" fill="rgb(251,135,54)" rx="2" ry="2" />
<text  x="1102.60" y="687.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.04%)</title><rect x="1072.8" y="597" width="0.4" height="15.0" fill="rgb(213,74,18)" rx="2" ry="2" />
<text  x="1075.80" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (29 samples, 0.03%)</title><rect x="1061.2" y="581" width="0.4" height="15.0" fill="rgb(232,128,19)" rx="2" ry="2" />
<text  x="1064.21" y="591.5" ></text>
</g>
<g >
<title>malloc_consolidate (2,431 samples, 2.81%)</title><rect x="1120.3" y="709" width="33.1" height="15.0" fill="rgb(214,142,37)" rx="2" ry="2" />
<text  x="1123.25" y="719.5" >ma..</text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_default_initialize (55 samples, 0.06%)</title><rect x="1100.4" y="661" width="0.7" height="15.0" fill="rgb(226,17,10)" rx="2" ry="2" />
<text  x="1103.37" y="671.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (13 samples, 0.02%)</title><rect x="172.5" y="645" width="0.2" height="15.0" fill="rgb(244,107,34)" rx="2" ry="2" />
<text  x="175.49" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::allocate (197 samples, 0.23%)</title><rect x="1080.3" y="597" width="2.7" height="15.0" fill="rgb(226,36,21)" rx="2" ry="2" />
<text  x="1083.32" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (729 samples, 0.84%)</title><rect x="420.7" y="613" width="9.9" height="15.0" fill="rgb(224,9,20)" rx="2" ry="2" />
<text  x="423.66" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;, true&gt;::_S_get (12 samples, 0.01%)</title><rect x="330.6" y="581" width="0.1" height="15.0" fill="rgb(216,218,24)" rx="2" ry="2" />
<text  x="333.58" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (86 samples, 0.10%)</title><rect x="300.5" y="549" width="1.1" height="15.0" fill="rgb(220,31,8)" rx="2" ry="2" />
<text  x="303.47" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (35 samples, 0.04%)</title><rect x="1023.5" y="565" width="0.5" height="15.0" fill="rgb(225,175,43)" rx="2" ry="2" />
<text  x="1026.53" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (552 samples, 0.64%)</title><rect x="243.8" y="645" width="7.6" height="15.0" fill="rgb(242,61,18)" rx="2" ry="2" />
<text  x="246.82" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (19 samples, 0.02%)</title><rect x="898.2" y="613" width="0.3" height="15.0" fill="rgb(226,196,50)" rx="2" ry="2" />
<text  x="901.24" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_AllocNode (34 samples, 0.04%)</title><rect x="1097.6" y="645" width="0.5" height="15.0" fill="rgb(233,65,31)" rx="2" ry="2" />
<text  x="1100.60" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (28 samples, 0.03%)</title><rect x="318.3" y="581" width="0.3" height="15.0" fill="rgb(229,167,54)" rx="2" ry="2" />
<text  x="321.26" y="591.5" ></text>
</g>
<g >
<title>std::__detail::operator==&lt;int, false&gt; (415 samples, 0.48%)</title><rect x="228.6" y="677" width="5.6" height="15.0" fill="rgb(229,36,8)" rx="2" ry="2" />
<text  x="231.59" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (607 samples, 0.70%)</title><rect x="1000.5" y="629" width="8.3" height="15.0" fill="rgb(215,147,30)" rx="2" ry="2" />
<text  x="1003.50" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (74 samples, 0.09%)</title><rect x="1077.2" y="581" width="1.0" height="15.0" fill="rgb(212,113,30)" rx="2" ry="2" />
<text  x="1080.15" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (291 samples, 0.34%)</title><rect x="942.6" y="645" width="4.0" height="15.0" fill="rgb(232,182,54)" rx="2" ry="2" />
<text  x="945.61" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_Hash_node (31 samples, 0.04%)</title><rect x="1067.5" y="613" width="0.4" height="15.0" fill="rgb(219,34,37)" rx="2" ry="2" />
<text  x="1070.52" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (19 samples, 0.02%)</title><rect x="994.2" y="645" width="0.2" height="15.0" fill="rgb(237,62,40)" rx="2" ry="2" />
<text  x="997.19" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_Hash_node_value_base (56 samples, 0.06%)</title><rect x="1075.8" y="597" width="0.8" height="15.0" fill="rgb(254,202,30)" rx="2" ry="2" />
<text  x="1078.83" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (71 samples, 0.08%)</title><rect x="342.8" y="549" width="0.9" height="15.0" fill="rgb(224,103,22)" rx="2" ry="2" />
<text  x="345.77" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_S_cget (16 samples, 0.02%)</title><rect x="351.0" y="597" width="0.2" height="15.0" fill="rgb(219,48,26)" rx="2" ry="2" />
<text  x="354.02" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (12 samples, 0.01%)</title><rect x="1065.9" y="613" width="0.1" height="15.0" fill="rgb(246,6,46)" rx="2" ry="2" />
<text  x="1068.86" y="623.5" ></text>
</g>
<g >
<title>RandomPivot (22 samples, 0.03%)</title><rect x="104.4" y="181" width="0.3" height="15.0" fill="rgb(246,19,8)" rx="2" ry="2" />
<text  x="107.35" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (32 samples, 0.04%)</title><rect x="921.4" y="597" width="0.4" height="15.0" fill="rgb(253,149,7)" rx="2" ry="2" />
<text  x="924.37" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (402 samples, 0.46%)</title><rect x="304.0" y="581" width="5.5" height="15.0" fill="rgb(250,129,21)" rx="2" ry="2" />
<text  x="307.02" y="591.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (10 samples, 0.01%)</title><rect x="162.1" y="565" width="0.1" height="15.0" fill="rgb(230,139,16)" rx="2" ry="2" />
<text  x="165.07" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (102 samples, 0.12%)</title><rect x="121.4" y="309" width="1.4" height="15.0" fill="rgb(218,38,22)" rx="2" ry="2" />
<text  x="124.36" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node_ptr (825 samples, 0.95%)</title><rect x="318.6" y="597" width="11.3" height="15.0" fill="rgb(231,167,13)" rx="2" ry="2" />
<text  x="321.65" y="607.5" ></text>
</g>
<g >
<title>rand (389 samples, 0.45%)</title><rect x="215.4" y="677" width="5.3" height="15.0" fill="rgb(254,202,40)" rx="2" ry="2" />
<text  x="218.40" y="687.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (167 samples, 0.19%)</title><rect x="325.8" y="565" width="2.3" height="15.0" fill="rgb(234,69,25)" rx="2" ry="2" />
<text  x="328.83" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (48 samples, 0.06%)</title><rect x="111.4" y="245" width="0.7" height="15.0" fill="rgb(239,20,41)" rx="2" ry="2" />
<text  x="114.42" y="255.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (8 samples, 0.01%)</title><rect x="150.8" y="501" width="0.1" height="15.0" fill="rgb(208,119,8)" rx="2" ry="2" />
<text  x="153.82" y="511.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (45 samples, 0.05%)</title><rect x="115.5" y="277" width="0.6" height="15.0" fill="rgb(226,109,39)" rx="2" ry="2" />
<text  x="118.46" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;, true&gt;::_S_get (15 samples, 0.02%)</title><rect x="322.2" y="581" width="0.2" height="15.0" fill="rgb(227,226,16)" rx="2" ry="2" />
<text  x="325.23" y="591.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (23 samples, 0.03%)</title><rect x="112.9" y="261" width="0.3" height="15.0" fill="rgb(210,126,9)" rx="2" ry="2" />
<text  x="115.93" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (138 samples, 0.16%)</title><rect x="1009.7" y="613" width="1.9" height="15.0" fill="rgb(229,17,25)" rx="2" ry="2" />
<text  x="1012.71" y="623.5" ></text>
</g>
<g >
<title>__random_r (9 samples, 0.01%)</title><rect x="128.9" y="357" width="0.1" height="15.0" fill="rgb(212,211,2)" rx="2" ry="2" />
<text  x="131.88" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (120 samples, 0.14%)</title><rect x="937.6" y="629" width="1.7" height="15.0" fill="rgb(211,37,36)" rx="2" ry="2" />
<text  x="940.64" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (14 samples, 0.02%)</title><rect x="1065.2" y="613" width="0.2" height="15.0" fill="rgb(228,88,46)" rx="2" ry="2" />
<text  x="1068.19" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (23 samples, 0.03%)</title><rect x="1098.6" y="645" width="0.3" height="15.0" fill="rgb(245,40,46)" rx="2" ry="2" />
<text  x="1101.61" y="655.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (26 samples, 0.03%)</title><rect x="105.9" y="197" width="0.4" height="15.0" fill="rgb(238,102,49)" rx="2" ry="2" />
<text  x="108.95" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (25 samples, 0.03%)</title><rect x="298.4" y="581" width="0.3" height="15.0" fill="rgb(218,208,29)" rx="2" ry="2" />
<text  x="301.36" y="591.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (19 samples, 0.02%)</title><rect x="1099.0" y="645" width="0.3" height="15.0" fill="rgb(234,114,41)" rx="2" ry="2" />
<text  x="1102.04" y="655.5" ></text>
</g>
<g >
<title>__random (15 samples, 0.02%)</title><rect x="112.4" y="261" width="0.2" height="15.0" fill="rgb(217,197,46)" rx="2" ry="2" />
<text  x="115.43" y="271.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (24 samples, 0.03%)</title><rect x="1095.2" y="629" width="0.3" height="15.0" fill="rgb(212,130,8)" rx="2" ry="2" />
<text  x="1098.21" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_state (48 samples, 0.06%)</title><rect x="1066.0" y="613" width="0.7" height="15.0" fill="rgb(240,120,22)" rx="2" ry="2" />
<text  x="1069.02" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (78 samples, 0.09%)</title><rect x="1093.2" y="629" width="1.1" height="15.0" fill="rgb(218,19,11)" rx="2" ry="2" />
<text  x="1096.21" y="639.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (34 samples, 0.04%)</title><rect x="165.7" y="613" width="0.5" height="15.0" fill="rgb(250,149,40)" rx="2" ry="2" />
<text  x="168.74" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (244 samples, 0.28%)</title><rect x="939.3" y="645" width="3.3" height="15.0" fill="rgb(221,226,36)" rx="2" ry="2" />
<text  x="942.28" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (94 samples, 0.11%)</title><rect x="158.1" y="549" width="1.3" height="15.0" fill="rgb(213,220,17)" rx="2" ry="2" />
<text  x="161.12" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node (1,264 samples, 1.46%)</title><rect x="315.5" y="613" width="17.3" height="15.0" fill="rgb(205,39,46)" rx="2" ry="2" />
<text  x="318.52" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (283 samples, 0.33%)</title><rect x="224.5" y="677" width="3.9" height="15.0" fill="rgb(250,73,16)" rx="2" ry="2" />
<text  x="227.50" y="687.5" ></text>
</g>
<g >
<title>__random_r (18 samples, 0.02%)</title><rect x="112.6" y="261" width="0.3" height="15.0" fill="rgb(244,74,0)" rx="2" ry="2" />
<text  x="115.63" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Identity, true&gt;::_S_cget (10 samples, 0.01%)</title><rect x="348.5" y="597" width="0.1" height="15.0" fill="rgb(243,47,15)" rx="2" ry="2" />
<text  x="351.49" y="607.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (10 samples, 0.01%)</title><rect x="149.2" y="469" width="0.1" height="15.0" fill="rgb(251,133,4)" rx="2" ry="2" />
<text  x="152.18" y="479.5" ></text>
</g>
<g >
<title>QuickSort (8,252 samples, 9.54%)</title><rect x="46.9" y="565" width="112.5" height="15.0" fill="rgb(208,81,36)" rx="2" ry="2" />
<text  x="49.85" y="575.5" >QuickSort</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_node_allocator (62 samples, 0.07%)</title><rect x="329.9" y="597" width="0.8" height="15.0" fill="rgb(240,63,21)" rx="2" ry="2" />
<text  x="332.90" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (12 samples, 0.01%)</title><rect x="1090.0" y="629" width="0.2" height="15.0" fill="rgb(240,224,32)" rx="2" ry="2" />
<text  x="1093.03" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (42 samples, 0.05%)</title><rect x="903.0" y="549" width="0.5" height="15.0" fill="rgb(221,169,39)" rx="2" ry="2" />
<text  x="905.96" y="559.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (21 samples, 0.02%)</title><rect x="1034.2" y="565" width="0.3" height="15.0" fill="rgb(213,151,27)" rx="2" ry="2" />
<text  x="1037.19" y="575.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (41 samples, 0.05%)</title><rect x="167.6" y="629" width="0.6" height="15.0" fill="rgb(209,115,13)" rx="2" ry="2" />
<text  x="170.62" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (28,819 samples, 33.31%)</title><rect x="529.0" y="629" width="393.0" height="15.0" fill="rgb(253,88,52)" rx="2" ry="2" />
<text  x="531.98" y="639.5" >std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::_..</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;int&gt;, true&gt;::_S_cget (9 samples, 0.01%)</title><rect x="920.9" y="581" width="0.1" height="15.0" fill="rgb(250,180,18)" rx="2" ry="2" />
<text  x="923.92" y="591.5" ></text>
</g>
<g >
<title>RandomPivot (24 samples, 0.03%)</title><rect x="119.8" y="309" width="0.3" height="15.0" fill="rgb(240,223,32)" rx="2" ry="2" />
<text  x="122.81" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (119 samples, 0.14%)</title><rect x="129.8" y="357" width="1.6" height="15.0" fill="rgb(235,166,0)" rx="2" ry="2" />
<text  x="132.80" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (9 samples, 0.01%)</title><rect x="314.3" y="613" width="0.2" height="15.0" fill="rgb(213,118,37)" rx="2" ry="2" />
<text  x="317.35" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (47 samples, 0.05%)</title><rect x="350.6" y="613" width="0.6" height="15.0" fill="rgb(248,106,42)" rx="2" ry="2" />
<text  x="353.60" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (25 samples, 0.03%)</title><rect x="347.0" y="597" width="0.4" height="15.0" fill="rgb(252,37,38)" rx="2" ry="2" />
<text  x="350.01" y="607.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;int, true, false&gt;, bool&gt;::pair&lt;std::__detail::_Node_iterator&lt;int, true, false&gt;, bool, true&gt; (13 samples, 0.02%)</title><rect x="1099.3" y="645" width="0.2" height="15.0" fill="rgb(225,75,51)" rx="2" ry="2" />
<text  x="1102.30" y="655.5" ></text>
</g>
<g >
<title>RandomPivot (8 samples, 0.01%)</title><rect x="136.6" y="405" width="0.1" height="15.0" fill="rgb(226,83,20)" rx="2" ry="2" />
<text  x="139.62" y="415.5" ></text>
</g>
<g >
<title>QuickSort (399 samples, 0.46%)</title><rect x="98.9" y="181" width="5.5" height="15.0" fill="rgb(226,161,38)" rx="2" ry="2" />
<text  x="101.91" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (11 samples, 0.01%)</title><rect x="1037.5" y="597" width="0.1" height="15.0" fill="rgb(227,67,14)" rx="2" ry="2" />
<text  x="1040.45" y="607.5" ></text>
</g>
<g >
<title>QuickSort (6,675 samples, 7.72%)</title><rect x="57.4" y="485" width="91.0" height="15.0" fill="rgb(231,63,25)" rx="2" ry="2" />
<text  x="60.41" y="495.5" >QuickSort</text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (29 samples, 0.03%)</title><rect x="1026.3" y="517" width="0.4" height="15.0" fill="rgb(227,77,33)" rx="2" ry="2" />
<text  x="1029.28" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (1,237 samples, 1.43%)</title><rect x="238.0" y="661" width="16.9" height="15.0" fill="rgb(250,226,16)" rx="2" ry="2" />
<text  x="240.99" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (9 samples, 0.01%)</title><rect x="1064.9" y="597" width="0.1" height="15.0" fill="rgb(226,41,3)" rx="2" ry="2" />
<text  x="1067.86" y="607.5" ></text>
</g>
<g >
<title>RandomPivot (15 samples, 0.02%)</title><rect x="103.5" y="165" width="0.2" height="15.0" fill="rgb(216,16,4)" rx="2" ry="2" />
<text  x="106.52" y="175.5" ></text>
</g>
<g >
<title>QuickSort (7,961 samples, 9.20%)</title><rect x="48.8" y="549" width="108.6" height="15.0" fill="rgb(228,61,33)" rx="2" ry="2" />
<text  x="51.83" y="559.5" >QuickSort</text>
</g>
<g >
<title>malloc (164 samples, 0.19%)</title><rect x="1118.0" y="709" width="2.3" height="15.0" fill="rgb(249,0,53)" rx="2" ry="2" />
<text  x="1121.01" y="719.5" ></text>
</g>
<g >
<title>_int_free (136 samples, 0.16%)</title><rect x="10.0" y="693" width="1.9" height="15.0" fill="rgb(244,203,36)" rx="2" ry="2" />
<text  x="13.04" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_S_cget (13 samples, 0.02%)</title><rect x="1092.1" y="613" width="0.2" height="15.0" fill="rgb(216,107,4)" rx="2" ry="2" />
<text  x="1095.09" y="623.5" ></text>
</g>
<g >
<title>QuickSort (1,184 samples, 1.37%)</title><rect x="94.0" y="245" width="16.2" height="15.0" fill="rgb(208,98,7)" rx="2" ry="2" />
<text  x="97.01" y="255.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (9 samples, 0.01%)</title><rect x="139.6" y="405" width="0.2" height="15.0" fill="rgb(221,99,43)" rx="2" ry="2" />
<text  x="142.64" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;int*, unsigned long&gt; (55 samples, 0.06%)</title><rect x="1100.4" y="613" width="0.7" height="15.0" fill="rgb(219,169,34)" rx="2" ry="2" />
<text  x="1103.37" y="623.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (49 samples, 0.06%)</title><rect x="126.3" y="341" width="0.7" height="15.0" fill="rgb(211,91,37)" rx="2" ry="2" />
<text  x="129.31" y="351.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (15 samples, 0.02%)</title><rect x="921.8" y="597" width="0.2" height="15.0" fill="rgb(230,17,38)" rx="2" ry="2" />
<text  x="924.81" y="607.5" ></text>
</g>
<g >
<title>__random (10 samples, 0.01%)</title><rect x="107.3" y="213" width="0.1" height="15.0" fill="rgb(233,134,54)" rx="2" ry="2" />
<text  x="110.30" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (253 samples, 0.29%)</title><rect x="1045.9" y="565" width="3.5" height="15.0" fill="rgb(231,29,50)" rx="2" ry="2" />
<text  x="1048.95" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (13 samples, 0.02%)</title><rect x="1037.2" y="581" width="0.1" height="15.0" fill="rgb(241,10,23)" rx="2" ry="2" />
<text  x="1040.16" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (15 samples, 0.02%)</title><rect x="1089.5" y="629" width="0.2" height="15.0" fill="rgb(209,6,42)" rx="2" ry="2" />
<text  x="1092.45" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (19 samples, 0.02%)</title><rect x="1067.9" y="613" width="0.3" height="15.0" fill="rgb(213,91,36)" rx="2" ry="2" />
<text  x="1070.95" y="623.5" ></text>
</g>
<g >
<title>QuickSort (27 samples, 0.03%)</title><rect x="101.4" y="69" width="0.3" height="15.0" fill="rgb(214,217,48)" rx="2" ry="2" />
<text  x="104.37" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;int&gt;, true&gt;::_S_cget (15 samples, 0.02%)</title><rect x="921.2" y="597" width="0.2" height="15.0" fill="rgb(240,65,28)" rx="2" ry="2" />
<text  x="924.17" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (48 samples, 0.06%)</title><rect x="106.3" y="197" width="0.7" height="15.0" fill="rgb(238,183,50)" rx="2" ry="2" />
<text  x="109.30" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (13 samples, 0.02%)</title><rect x="334.2" y="613" width="0.2" height="15.0" fill="rgb(220,131,7)" rx="2" ry="2" />
<text  x="337.23" y="623.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (11 samples, 0.01%)</title><rect x="146.0" y="469" width="0.2" height="15.0" fill="rgb(211,124,3)" rx="2" ry="2" />
<text  x="149.02" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (115 samples, 0.13%)</title><rect x="1076.6" y="597" width="1.6" height="15.0" fill="rgb(241,115,27)" rx="2" ry="2" />
<text  x="1079.59" y="607.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (31 samples, 0.04%)</title><rect x="1085.5" y="565" width="0.4" height="15.0" fill="rgb(231,25,13)" rx="2" ry="2" />
<text  x="1088.49" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (112 samples, 0.13%)</title><rect x="135.1" y="389" width="1.5" height="15.0" fill="rgb(254,4,9)" rx="2" ry="2" />
<text  x="138.09" y="399.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (134 samples, 0.15%)</title><rect x="345.0" y="581" width="1.9" height="15.0" fill="rgb(238,12,36)" rx="2" ry="2" />
<text  x="348.04" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_node_allocator (47 samples, 0.05%)</title><rect x="1087.7" y="613" width="0.6" height="15.0" fill="rgb(234,20,29)" rx="2" ry="2" />
<text  x="1090.65" y="623.5" ></text>
</g>
<g >
<title>QuickSort (544 samples, 0.63%)</title><rect x="97.9" y="197" width="7.4" height="15.0" fill="rgb(232,123,40)" rx="2" ry="2" />
<text  x="100.93" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (19 samples, 0.02%)</title><rect x="352.8" y="645" width="0.2" height="15.0" fill="rgb(230,119,23)" rx="2" ry="2" />
<text  x="355.78" y="655.5" ></text>
</g>
<g >
<title>__random (1,000 samples, 1.16%)</title><rect x="189.1" y="677" width="13.7" height="15.0" fill="rgb(218,122,7)" rx="2" ry="2" />
<text  x="192.15" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (24 samples, 0.03%)</title><rect x="299.2" y="565" width="0.3" height="15.0" fill="rgb(206,23,17)" rx="2" ry="2" />
<text  x="302.16" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (8 samples, 0.01%)</title><rect x="1099.5" y="661" width="0.1" height="15.0" fill="rgb(249,18,49)" rx="2" ry="2" />
<text  x="1102.49" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (26 samples, 0.03%)</title><rect x="1046.7" y="549" width="0.4" height="15.0" fill="rgb(212,124,14)" rx="2" ry="2" />
<text  x="1049.70" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (64 samples, 0.07%)</title><rect x="1034.5" y="565" width="0.8" height="15.0" fill="rgb(219,39,14)" rx="2" ry="2" />
<text  x="1037.48" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (22 samples, 0.03%)</title><rect x="274.1" y="613" width="0.3" height="15.0" fill="rgb(209,174,37)" rx="2" ry="2" />
<text  x="277.13" y="623.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (44 samples, 0.05%)</title><rect x="139.2" y="421" width="0.6" height="15.0" fill="rgb(228,169,25)" rx="2" ry="2" />
<text  x="142.16" y="431.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;int, false&gt;*&gt;::pointer_to (25 samples, 0.03%)</title><rect x="332.4" y="597" width="0.4" height="15.0" fill="rgb(227,217,7)" rx="2" ry="2" />
<text  x="335.42" y="607.5" ></text>
</g>
<g >
<title>QuickSort (6,992 samples, 8.08%)</title><rect x="55.4" y="501" width="95.4" height="15.0" fill="rgb(220,210,25)" rx="2" ry="2" />
<text  x="58.43" y="511.5" >QuickSort</text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (121 samples, 0.14%)</title><rect x="124.0" y="325" width="1.6" height="15.0" fill="rgb(234,12,14)" rx="2" ry="2" />
<text  x="126.99" y="335.5" ></text>
</g>
<g >
<title>RandomPivot (23 samples, 0.03%)</title><rect x="117.3" y="293" width="0.3" height="15.0" fill="rgb(231,96,30)" rx="2" ry="2" />
<text  x="120.32" y="303.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (39 samples, 0.05%)</title><rect x="146.2" y="469" width="0.5" height="15.0" fill="rgb(253,22,18)" rx="2" ry="2" />
<text  x="149.17" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (16 samples, 0.02%)</title><rect x="341.6" y="565" width="0.3" height="15.0" fill="rgb(214,217,16)" rx="2" ry="2" />
<text  x="344.64" y="575.5" ></text>
</g>
<g >
<title>QuickSort (98 samples, 0.11%)</title><rect x="100.9" y="117" width="1.4" height="15.0" fill="rgb(219,18,43)" rx="2" ry="2" />
<text  x="103.92" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (267 samples, 0.31%)</title><rect x="934.0" y="613" width="3.6" height="15.0" fill="rgb(220,22,32)" rx="2" ry="2" />
<text  x="937.00" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (18 samples, 0.02%)</title><rect x="1035.6" y="581" width="0.2" height="15.0" fill="rgb(211,123,29)" rx="2" ry="2" />
<text  x="1038.60" y="591.5" ></text>
</g>
<g >
<title>QuickSort (3,316 samples, 3.83%)</title><rect x="80.4" y="341" width="45.3" height="15.0" fill="rgb(232,98,32)" rx="2" ry="2" />
<text  x="83.43" y="351.5" >Quic..</text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (118 samples, 0.14%)</title><rect x="139.8" y="421" width="1.6" height="15.0" fill="rgb(246,5,4)" rx="2" ry="2" />
<text  x="142.76" y="431.5" ></text>
</g>
<g >
<title>QuickSort (11 samples, 0.01%)</title><rect x="101.4" y="37" width="0.2" height="15.0" fill="rgb(207,132,18)" rx="2" ry="2" />
<text  x="104.45" y="47.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (98 samples, 0.11%)</title><rect x="156.1" y="533" width="1.3" height="15.0" fill="rgb(234,84,14)" rx="2" ry="2" />
<text  x="159.07" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (17 samples, 0.02%)</title><rect x="228.4" y="677" width="0.2" height="15.0" fill="rgb(251,69,7)" rx="2" ry="2" />
<text  x="231.36" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (257 samples, 0.30%)</title><rect x="251.4" y="645" width="3.5" height="15.0" fill="rgb(206,123,23)" rx="2" ry="2" />
<text  x="254.35" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::destroy&lt;int&gt; (50 samples, 0.06%)</title><rect x="331.7" y="581" width="0.7" height="15.0" fill="rgb(235,70,8)" rx="2" ry="2" />
<text  x="334.74" y="591.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (65 samples, 0.08%)</title><rect x="1086.0" y="581" width="0.9" height="15.0" fill="rgb(241,184,20)" rx="2" ry="2" />
<text  x="1089.03" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (92 samples, 0.11%)</title><rect x="296.5" y="581" width="1.2" height="15.0" fill="rgb(214,69,9)" rx="2" ry="2" />
<text  x="299.48" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (46 samples, 0.05%)</title><rect x="297.7" y="581" width="0.7" height="15.0" fill="rgb(244,157,17)" rx="2" ry="2" />
<text  x="300.74" y="591.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::erase (6,971 samples, 8.06%)</title><rect x="258.2" y="677" width="95.1" height="15.0" fill="rgb(252,149,16)" rx="2" ry="2" />
<text  x="261.21" y="687.5" >std::unorde..</text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;int, true, false&gt;, bool&gt;::pair&lt;std::__detail::_Node_iterator&lt;int, true, false&gt;, bool, true&gt; (115 samples, 0.13%)</title><rect x="1095.8" y="629" width="1.6" height="15.0" fill="rgb(252,33,29)" rx="2" ry="2" />
<text  x="1098.81" y="639.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (57 samples, 0.07%)</title><rect x="161.4" y="581" width="0.8" height="15.0" fill="rgb(243,117,38)" rx="2" ry="2" />
<text  x="164.43" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_S_cget (167 samples, 0.19%)</title><rect x="973.2" y="629" width="2.2" height="15.0" fill="rgb(247,168,8)" rx="2" ry="2" />
<text  x="976.17" y="639.5" ></text>
</g>
<g >
<title>QuickSort (2,487 samples, 2.87%)</title><rect x="85.9" y="309" width="33.9" height="15.0" fill="rgb(232,45,38)" rx="2" ry="2" />
<text  x="88.89" y="319.5" >Qu..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::max_size (10 samples, 0.01%)</title><rect x="1081.3" y="565" width="0.1" height="15.0" fill="rgb(213,206,22)" rx="2" ry="2" />
<text  x="1084.29" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (116 samples, 0.13%)</title><rect x="127.0" y="341" width="1.6" height="15.0" fill="rgb(241,128,51)" rx="2" ry="2" />
<text  x="129.98" y="351.5" ></text>
</g>
<g >
<title>std::forward&lt;bool&gt; (14 samples, 0.02%)</title><rect x="1095.0" y="629" width="0.2" height="15.0" fill="rgb(218,40,32)" rx="2" ry="2" />
<text  x="1098.02" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (13 samples, 0.02%)</title><rect x="1064.7" y="597" width="0.2" height="15.0" fill="rgb(219,0,47)" rx="2" ry="2" />
<text  x="1067.69" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (119 samples, 0.14%)</title><rect x="153.9" y="517" width="1.7" height="15.0" fill="rgb(239,161,27)" rx="2" ry="2" />
<text  x="156.93" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (16 samples, 0.02%)</title><rect x="1014.8" y="613" width="0.2" height="15.0" fill="rgb(233,32,28)" rx="2" ry="2" />
<text  x="1017.78" y="623.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (49 samples, 0.06%)</title><rect x="141.6" y="437" width="0.7" height="15.0" fill="rgb(248,113,37)" rx="2" ry="2" />
<text  x="144.61" y="447.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (10 samples, 0.01%)</title><rect x="123.9" y="309" width="0.1" height="15.0" fill="rgb(242,164,35)" rx="2" ry="2" />
<text  x="126.86" y="319.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (8 samples, 0.01%)</title><rect x="1099.5" y="645" width="0.1" height="15.0" fill="rgb(220,209,3)" rx="2" ry="2" />
<text  x="1102.49" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (64 samples, 0.07%)</title><rect x="1063.3" y="581" width="0.9" height="15.0" fill="rgb(226,53,22)" rx="2" ry="2" />
<text  x="1066.34" y="591.5" ></text>
</g>
<g >
<title>QuickSort (8,550 samples, 9.88%)</title><rect x="44.7" y="581" width="116.6" height="15.0" fill="rgb(237,13,39)" rx="2" ry="2" />
<text  x="47.71" y="591.5" >QuickSort</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::max_size (9 samples, 0.01%)</title><rect x="1081.4" y="581" width="0.1" height="15.0" fill="rgb(247,112,7)" rx="2" ry="2" />
<text  x="1084.42" y="591.5" ></text>
</g>
<g >
<title>QuickSort (5,662 samples, 6.54%)</title><rect x="64.1" y="437" width="77.3" height="15.0" fill="rgb(239,19,15)" rx="2" ry="2" />
<text  x="67.15" y="447.5" >QuickSort</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (20 samples, 0.02%)</title><rect x="1072.2" y="597" width="0.3" height="15.0" fill="rgb(215,89,0)" rx="2" ry="2" />
<text  x="1075.19" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (49 samples, 0.06%)</title><rect x="333.6" y="613" width="0.6" height="15.0" fill="rgb(237,123,39)" rx="2" ry="2" />
<text  x="336.57" y="623.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (2,683 samples, 3.10%)</title><rect x="1153.4" y="709" width="36.6" height="15.0" fill="rgb(243,169,3)" rx="2" ry="2" />
<text  x="1156.41" y="719.5" >unl..</text>
</g>
<g >
<title>QuickSort (5,293 samples, 6.12%)</title><rect x="66.8" y="421" width="72.2" height="15.0" fill="rgb(217,155,9)" rx="2" ry="2" />
<text  x="69.78" y="431.5" >QuickSort</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::construct&lt;int, int const&amp;&gt; (27 samples, 0.03%)</title><rect x="1088.7" y="613" width="0.3" height="15.0" fill="rgb(231,0,13)" rx="2" ry="2" />
<text  x="1091.66" y="623.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (22 samples, 0.03%)</title><rect x="1041.3" y="565" width="0.3" height="15.0" fill="rgb(209,5,54)" rx="2" ry="2" />
<text  x="1044.31" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals (1,701 samples, 1.97%)</title><rect x="898.8" y="613" width="23.2" height="15.0" fill="rgb(225,183,42)" rx="2" ry="2" />
<text  x="901.81" y="623.5" >s..</text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (24 samples, 0.03%)</title><rect x="1064.4" y="581" width="0.3" height="15.0" fill="rgb(220,88,37)" rx="2" ry="2" />
<text  x="1067.36" y="591.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (14 samples, 0.02%)</title><rect x="104.8" y="181" width="0.2" height="15.0" fill="rgb(213,58,47)" rx="2" ry="2" />
<text  x="107.82" y="191.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.01%)</title><rect x="1067.4" y="613" width="0.1" height="15.0" fill="rgb(241,47,53)" rx="2" ry="2" />
<text  x="1070.36" y="623.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (44 samples, 0.05%)</title><rect x="157.5" y="549" width="0.6" height="15.0" fill="rgb(228,193,28)" rx="2" ry="2" />
<text  x="160.52" y="559.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (45 samples, 0.05%)</title><rect x="137.0" y="405" width="0.6" height="15.0" fill="rgb(220,159,40)" rx="2" ry="2" />
<text  x="139.99" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::destroy&lt;int&gt; (15 samples, 0.02%)</title><rect x="317.6" y="597" width="0.2" height="15.0" fill="rgb(216,207,51)" rx="2" ry="2" />
<text  x="320.58" y="607.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (11 samples, 0.01%)</title><rect x="134.9" y="373" width="0.2" height="15.0" fill="rgb(210,208,42)" rx="2" ry="2" />
<text  x="137.94" y="383.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (8 samples, 0.01%)</title><rect x="161.3" y="581" width="0.1" height="15.0" fill="rgb(252,220,20)" rx="2" ry="2" />
<text  x="164.32" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::construct&lt;int, int const&amp;&gt; (287 samples, 0.33%)</title><rect x="1083.0" y="597" width="3.9" height="15.0" fill="rgb(207,18,50)" rx="2" ry="2" />
<text  x="1086.00" y="607.5" ></text>
</g>
<g >
<title>QuickSort (1,438 samples, 1.66%)</title><rect x="92.5" y="261" width="19.6" height="15.0" fill="rgb(251,155,12)" rx="2" ry="2" />
<text  x="95.46" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (24 samples, 0.03%)</title><rect x="901.9" y="565" width="0.4" height="15.0" fill="rgb(233,223,19)" rx="2" ry="2" />
<text  x="904.94" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (101 samples, 0.12%)</title><rect x="170.5" y="645" width="1.4" height="15.0" fill="rgb(236,197,47)" rx="2" ry="2" />
<text  x="173.51" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (32 samples, 0.04%)</title><rect x="310.3" y="597" width="0.4" height="15.0" fill="rgb(242,114,16)" rx="2" ry="2" />
<text  x="313.29" y="607.5" ></text>
</g>
<g >
<title>__random (11 samples, 0.01%)</title><rect x="114.9" y="277" width="0.1" height="15.0" fill="rgb(229,197,51)" rx="2" ry="2" />
<text  x="117.87" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (108 samples, 0.12%)</title><rect x="149.3" y="485" width="1.5" height="15.0" fill="rgb(228,104,36)" rx="2" ry="2" />
<text  x="152.32" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::construct&lt;int, int const&amp;&gt; (25 samples, 0.03%)</title><rect x="1072.5" y="597" width="0.3" height="15.0" fill="rgb(221,66,24)" rx="2" ry="2" />
<text  x="1075.46" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (49 samples, 0.06%)</title><rect x="351.5" y="629" width="0.6" height="15.0" fill="rgb(232,111,29)" rx="2" ry="2" />
<text  x="354.46" y="639.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::insert (7,889 samples, 9.12%)</title><rect x="991.9" y="677" width="107.6" height="15.0" fill="rgb(223,81,39)" rx="2" ry="2" />
<text  x="994.88" y="687.5" >std::unordere..</text>
</g>
<g >
<title>std::swap&lt;int&gt; (55 samples, 0.06%)</title><rect x="169.8" y="645" width="0.7" height="15.0" fill="rgb(253,116,34)" rx="2" ry="2" />
<text  x="172.76" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10 samples, 0.01%)</title><rect x="1037.0" y="581" width="0.2" height="15.0" fill="rgb(211,65,17)" rx="2" ry="2" />
<text  x="1040.03" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (144 samples, 0.17%)</title><rect x="901.6" y="581" width="1.9" height="15.0" fill="rgb(252,49,11)" rx="2" ry="2" />
<text  x="904.57" y="591.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.02%)</title><rect x="1085.2" y="565" width="0.3" height="15.0" fill="rgb(248,115,53)" rx="2" ry="2" />
<text  x="1088.20" y="575.5" ></text>
</g>
<g >
<title>QuickSort (45 samples, 0.05%)</title><rect x="101.3" y="85" width="0.6" height="15.0" fill="rgb(211,35,24)" rx="2" ry="2" />
<text  x="104.27" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (52 samples, 0.06%)</title><rect x="109.5" y="229" width="0.7" height="15.0" fill="rgb(207,153,51)" rx="2" ry="2" />
<text  x="112.45" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (51 samples, 0.06%)</title><rect x="314.5" y="613" width="0.7" height="15.0" fill="rgb(209,72,37)" rx="2" ry="2" />
<text  x="317.47" y="623.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (49 samples, 0.06%)</title><rect x="1093.6" y="613" width="0.7" height="15.0" fill="rgb(239,78,25)" rx="2" ry="2" />
<text  x="1096.60" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (7,821 samples, 9.04%)</title><rect x="992.8" y="661" width="106.7" height="15.0" fill="rgb(232,143,25)" rx="2" ry="2" />
<text  x="995.81" y="671.5" >std::__detail..</text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (18 samples, 0.02%)</title><rect x="1071.9" y="597" width="0.3" height="15.0" fill="rgb(236,149,54)" rx="2" ry="2" />
<text  x="1074.94" y="607.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (14 samples, 0.02%)</title><rect x="126.8" y="325" width="0.2" height="15.0" fill="rgb(233,178,50)" rx="2" ry="2" />
<text  x="129.79" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (14 samples, 0.02%)</title><rect x="318.5" y="565" width="0.1" height="15.0" fill="rgb(206,145,46)" rx="2" ry="2" />
<text  x="321.45" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (11 samples, 0.01%)</title><rect x="1064.2" y="581" width="0.2" height="15.0" fill="rgb(209,177,27)" rx="2" ry="2" />
<text  x="1067.21" y="591.5" ></text>
</g>
<g >
<title>QuickSort (18 samples, 0.02%)</title><rect x="101.4" y="53" width="0.3" height="15.0" fill="rgb(235,91,42)" rx="2" ry="2" />
<text  x="104.41" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_S_cget (28 samples, 0.03%)</title><rect x="1023.1" y="549" width="0.4" height="15.0" fill="rgb(238,50,7)" rx="2" ry="2" />
<text  x="1026.14" y="559.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (14 samples, 0.02%)</title><rect x="897.6" y="613" width="0.2" height="15.0" fill="rgb(227,187,17)" rx="2" ry="2" />
<text  x="900.60" y="623.5" ></text>
</g>
<g >
<title>[TestPerf] (12 samples, 0.01%)</title><rect x="323.7" y="565" width="0.2" height="15.0" fill="rgb(254,33,25)" rx="2" ry="2" />
<text  x="326.75" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (122 samples, 0.14%)</title><rect x="514.0" y="629" width="1.7" height="15.0" fill="rgb(213,70,9)" rx="2" ry="2" />
<text  x="517.02" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (24 samples, 0.03%)</title><rect x="991.6" y="661" width="0.3" height="15.0" fill="rgb(228,131,20)" rx="2" ry="2" />
<text  x="994.56" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (19 samples, 0.02%)</title><rect x="334.0" y="597" width="0.2" height="15.0" fill="rgb(252,14,50)" rx="2" ry="2" />
<text  x="336.98" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (18 samples, 0.02%)</title><rect x="353.0" y="645" width="0.3" height="15.0" fill="rgb(213,104,18)" rx="2" ry="2" />
<text  x="356.04" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Identity, true&gt;::_S_cget (8 samples, 0.01%)</title><rect x="302.1" y="581" width="0.1" height="15.0" fill="rgb(219,207,48)" rx="2" ry="2" />
<text  x="305.06" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (64 samples, 0.07%)</title><rect x="1091.2" y="613" width="0.9" height="15.0" fill="rgb(224,13,7)" rx="2" ry="2" />
<text  x="1094.21" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (35 samples, 0.04%)</title><rect x="1065.4" y="613" width="0.5" height="15.0" fill="rgb(215,93,44)" rx="2" ry="2" />
<text  x="1068.38" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (9 samples, 0.01%)</title><rect x="1027.4" y="565" width="0.1" height="15.0" fill="rgb(215,121,51)" rx="2" ry="2" />
<text  x="1030.37" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (246 samples, 0.28%)</title><rect x="254.9" y="661" width="3.3" height="15.0" fill="rgb(233,60,35)" rx="2" ry="2" />
<text  x="257.86" y="671.5" ></text>
</g>
<g >
<title>std::forward&lt;int&amp;&gt; (55 samples, 0.06%)</title><rect x="904.3" y="565" width="0.8" height="15.0" fill="rgb(219,8,11)" rx="2" ry="2" />
<text  x="907.35" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (19 samples, 0.02%)</title><rect x="318.0" y="581" width="0.3" height="15.0" fill="rgb(249,11,22)" rx="2" ry="2" />
<text  x="321.00" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (12 samples, 0.01%)</title><rect x="1098.4" y="645" width="0.2" height="15.0" fill="rgb(239,34,36)" rx="2" ry="2" />
<text  x="1101.44" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, unsigned long, false&gt;::_S_equals (26 samples, 0.03%)</title><rect x="337.8" y="613" width="0.3" height="15.0" fill="rgb(228,185,31)" rx="2" ry="2" />
<text  x="340.77" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_bucket_begin (1,657 samples, 1.92%)</title><rect x="1015.0" y="613" width="22.6" height="15.0" fill="rgb(234,118,38)" rx="2" ry="2" />
<text  x="1018.00" y="623.5" >s..</text>
</g>
<g >
<title>tick_sched_timer (9 samples, 0.01%)</title><rect x="897.6" y="549" width="0.1" height="15.0" fill="rgb(207,140,37)" rx="2" ry="2" />
<text  x="900.63" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (66 samples, 0.08%)</title><rect x="1025.8" y="533" width="0.9" height="15.0" fill="rgb(232,53,45)" rx="2" ry="2" />
<text  x="1028.78" y="543.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (34 samples, 0.04%)</title><rect x="153.5" y="517" width="0.4" height="15.0" fill="rgb(235,83,6)" rx="2" ry="2" />
<text  x="156.47" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2,244 samples, 2.59%)</title><rect x="279.7" y="597" width="30.6" height="15.0" fill="rgb(248,197,12)" rx="2" ry="2" />
<text  x="282.68" y="607.5" >st..</text>
</g>
<g >
<title>QuickSort (1,777 samples, 2.05%)</title><rect x="90.2" y="277" width="24.2" height="15.0" fill="rgb(221,179,22)" rx="2" ry="2" />
<text  x="93.18" y="287.5" >Q..</text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;int, false&gt;*&gt;::pointer_to (127 samples, 0.15%)</title><rect x="328.2" y="581" width="1.7" height="15.0" fill="rgb(236,140,44)" rx="2" ry="2" />
<text  x="331.17" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (262 samples, 0.30%)</title><rect x="363.6" y="661" width="3.6" height="15.0" fill="rgb(243,82,16)" rx="2" ry="2" />
<text  x="366.59" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;, true&gt;::_S_get (41 samples, 0.05%)</title><rect x="321.7" y="565" width="0.5" height="15.0" fill="rgb(216,107,39)" rx="2" ry="2" />
<text  x="324.67" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (25 samples, 0.03%)</title><rect x="260.3" y="645" width="0.3" height="15.0" fill="rgb(209,68,13)" rx="2" ry="2" />
<text  x="263.29" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_eq (44 samples, 0.05%)</title><rect x="347.9" y="597" width="0.6" height="15.0" fill="rgb(205,49,22)" rx="2" ry="2" />
<text  x="350.89" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, unsigned long, false&gt;::_S_equals (1,461 samples, 1.69%)</title><rect x="899.7" y="597" width="19.9" height="15.0" fill="rgb(225,78,3)" rx="2" ry="2" />
<text  x="902.70" y="607.5" ></text>
</g>
<g >
<title>QuickSort (9,813 samples, 11.34%)</title><rect x="35.8" y="645" width="133.8" height="15.0" fill="rgb(225,38,34)" rx="2" ry="2" />
<text  x="38.79" y="655.5" >QuickSort</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Identity, true&gt;::_S_cget (22 samples, 0.03%)</title><rect x="1044.5" y="549" width="0.3" height="15.0" fill="rgb(217,85,26)" rx="2" ry="2" />
<text  x="1047.53" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (59 samples, 0.07%)</title><rect x="267.0" y="597" width="0.8" height="15.0" fill="rgb(208,164,31)" rx="2" ry="2" />
<text  x="270.02" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (172 samples, 0.20%)</title><rect x="1047.1" y="549" width="2.3" height="15.0" fill="rgb(240,115,40)" rx="2" ry="2" />
<text  x="1050.05" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (36 samples, 0.04%)</title><rect x="267.3" y="581" width="0.5" height="15.0" fill="rgb(224,68,25)" rx="2" ry="2" />
<text  x="270.34" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;int&gt;, true&gt;::_S_cget (19 samples, 0.02%)</title><rect x="348.2" y="581" width="0.3" height="15.0" fill="rgb(207,65,41)" rx="2" ry="2" />
<text  x="351.23" y="591.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (14 samples, 0.02%)</title><rect x="103.9" y="165" width="0.2" height="15.0" fill="rgb(225,92,28)" rx="2" ry="2" />
<text  x="106.93" y="175.5" ></text>
</g>
<g >
<title>__random_r (17 samples, 0.02%)</title><rect x="120.3" y="309" width="0.2" height="15.0" fill="rgb(229,50,26)" rx="2" ry="2" />
<text  x="123.26" y="319.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (11 samples, 0.01%)</title><rect x="118.5" y="277" width="0.1" height="15.0" fill="rgb(242,51,33)" rx="2" ry="2" />
<text  x="121.47" y="287.5" ></text>
</g>
<g >
<title>RandomPivot (25 samples, 0.03%)</title><rect x="105.3" y="197" width="0.4" height="15.0" fill="rgb(218,198,45)" rx="2" ry="2" />
<text  x="108.35" y="207.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (51 samples, 0.06%)</title><rect x="129.1" y="357" width="0.7" height="15.0" fill="rgb(247,153,52)" rx="2" ry="2" />
<text  x="132.11" y="367.5" ></text>
</g>
<g >
<title>__random (9 samples, 0.01%)</title><rect x="110.6" y="245" width="0.1" height="15.0" fill="rgb(247,123,48)" rx="2" ry="2" />
<text  x="113.60" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_store_code (8 samples, 0.01%)</title><rect x="1092.8" y="629" width="0.1" height="15.0" fill="rgb(245,6,52)" rx="2" ry="2" />
<text  x="1095.82" y="639.5" ></text>
</g>
<g >
<title>[unknown] (140 samples, 0.16%)</title><rect x="10.0" y="709" width="1.9" height="15.0" fill="rgb(214,24,29)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (204 samples, 0.24%)</title><rect x="357.2" y="661" width="2.8" height="15.0" fill="rgb(230,184,5)" rx="2" ry="2" />
<text  x="360.19" y="671.5" ></text>
</g>
<g >
<title>all (86,518 samples, 100%)</title><rect x="10.0" y="741" width="1180.0" height="15.0" fill="rgb(254,203,6)" rx="2" ry="2" />
<text  x="13.00" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (27 samples, 0.03%)</title><rect x="1073.8" y="581" width="0.4" height="15.0" fill="rgb(240,158,28)" rx="2" ry="2" />
<text  x="1076.84" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (26 samples, 0.03%)</title><rect x="315.2" y="613" width="0.3" height="15.0" fill="rgb(206,90,54)" rx="2" ry="2" />
<text  x="318.17" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_allocate_node&lt;int const&amp;&gt; (1,426 samples, 1.65%)</title><rect x="1068.2" y="613" width="19.5" height="15.0" fill="rgb(219,147,3)" rx="2" ry="2" />
<text  x="1071.21" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (21 samples, 0.02%)</title><rect x="902.7" y="549" width="0.3" height="15.0" fill="rgb(221,198,36)" rx="2" ry="2" />
<text  x="905.67" y="559.5" ></text>
</g>
<g >
<title>QuickSort (66 samples, 0.08%)</title><rect x="101.1" y="101" width="0.9" height="15.0" fill="rgb(241,5,29)" rx="2" ry="2" />
<text  x="104.13" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (16 samples, 0.02%)</title><rect x="1098.2" y="645" width="0.2" height="15.0" fill="rgb(247,162,23)" rx="2" ry="2" />
<text  x="1101.22" y="655.5" ></text>
</g>
<g >
<title>RandomPivot (23 samples, 0.03%)</title><rect x="107.0" y="213" width="0.3" height="15.0" fill="rgb(236,203,39)" rx="2" ry="2" />
<text  x="109.96" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (22 samples, 0.03%)</title><rect x="1026.7" y="565" width="0.3" height="15.0" fill="rgb(240,200,52)" rx="2" ry="2" />
<text  x="1029.68" y="575.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (13 samples, 0.02%)</title><rect x="897.6" y="597" width="0.2" height="15.0" fill="rgb(250,160,45)" rx="2" ry="2" />
<text  x="900.61" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,204 samples, 1.39%)</title><rect x="1018.9" y="581" width="16.4" height="15.0" fill="rgb(220,78,11)" rx="2" ry="2" />
<text  x="1021.93" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (272 samples, 0.31%)</title><rect x="247.6" y="629" width="3.8" height="15.0" fill="rgb(246,148,38)" rx="2" ry="2" />
<text  x="250.64" y="639.5" ></text>
</g>
<g >
<title>RandomPivot (32 samples, 0.04%)</title><rect x="108.4" y="229" width="0.5" height="15.0" fill="rgb(247,26,29)" rx="2" ry="2" />
<text  x="111.44" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (19 samples, 0.02%)</title><rect x="1002.5" y="581" width="0.3" height="15.0" fill="rgb(249,118,25)" rx="2" ry="2" />
<text  x="1005.55" y="591.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;int*, unsigned long, int&gt; (55 samples, 0.06%)</title><rect x="1100.4" y="645" width="0.7" height="15.0" fill="rgb(218,150,33)" rx="2" ry="2" />
<text  x="1103.37" y="655.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__detail::_Node_iterator&lt;int, true, false&gt; &gt; (15 samples, 0.02%)</title><rect x="1095.5" y="629" width="0.2" height="15.0" fill="rgb(236,30,9)" rx="2" ry="2" />
<text  x="1098.54" y="639.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (11 samples, 0.01%)</title><rect x="136.8" y="405" width="0.2" height="15.0" fill="rgb(231,195,13)" rx="2" ry="2" />
<text  x="139.84" y="415.5" ></text>
</g>
<g >
<title>std::fill_n&lt;int*, unsigned long, int&gt; (55 samples, 0.06%)</title><rect x="1100.4" y="597" width="0.7" height="15.0" fill="rgb(233,91,23)" rx="2" ry="2" />
<text  x="1103.37" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::erase (13 samples, 0.02%)</title><rect x="224.3" y="677" width="0.2" height="15.0" fill="rgb(250,167,21)" rx="2" ry="2" />
<text  x="227.32" y="687.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (52 samples, 0.06%)</title><rect x="120.7" y="309" width="0.7" height="15.0" fill="rgb(224,192,7)" rx="2" ry="2" />
<text  x="123.65" y="319.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::find (46,822 samples, 54.12%)</title><rect x="353.3" y="677" width="638.6" height="15.0" fill="rgb(225,162,16)" rx="2" ry="2" />
<text  x="356.29" y="687.5" >std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::find</text>
</g>
<g >
<title>QuickSort (9,498 samples, 10.98%)</title><rect x="38.0" y="629" width="129.5" height="15.0" fill="rgb(252,222,46)" rx="2" ry="2" />
<text  x="40.99" y="639.5" >QuickSort</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (20 samples, 0.02%)</title><rect x="302.3" y="581" width="0.3" height="15.0" fill="rgb(225,177,28)" rx="2" ry="2" />
<text  x="305.35" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (1,375 samples, 1.59%)</title><rect x="1018.6" y="597" width="18.7" height="15.0" fill="rgb(212,215,10)" rx="2" ry="2" />
<text  x="1021.59" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (14 samples, 0.02%)</title><rect x="310.9" y="597" width="0.2" height="15.0" fill="rgb(229,175,14)" rx="2" ry="2" />
<text  x="313.94" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (42 samples, 0.05%)</title><rect x="1044.3" y="565" width="0.5" height="15.0" fill="rgb(227,179,10)" rx="2" ry="2" />
<text  x="1047.26" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (17 samples, 0.02%)</title><rect x="317.3" y="597" width="0.3" height="15.0" fill="rgb(236,105,52)" rx="2" ry="2" />
<text  x="320.35" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_erase (28 samples, 0.03%)</title><rect x="258.7" y="661" width="0.4" height="15.0" fill="rgb(211,39,11)" rx="2" ry="2" />
<text  x="261.70" y="671.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (41 samples, 0.05%)</title><rect x="123.4" y="325" width="0.6" height="15.0" fill="rgb(221,192,37)" rx="2" ry="2" />
<text  x="126.43" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (31 samples, 0.04%)</title><rect x="301.6" y="581" width="0.5" height="15.0" fill="rgb(228,203,45)" rx="2" ry="2" />
<text  x="304.64" y="591.5" ></text>
</g>
<g >
<title>QuickSort (211 samples, 0.24%)</title><rect x="100.1" y="149" width="2.9" height="15.0" fill="rgb(244,143,14)" rx="2" ry="2" />
<text  x="103.11" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_eq (24 samples, 0.03%)</title><rect x="920.7" y="597" width="0.3" height="15.0" fill="rgb(208,209,5)" rx="2" ry="2" />
<text  x="923.72" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (93 samples, 0.11%)</title><rect x="1059.7" y="565" width="1.3" height="15.0" fill="rgb(241,38,54)" rx="2" ry="2" />
<text  x="1062.71" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_AllocNode (10 samples, 0.01%)</title><rect x="992.4" y="661" width="0.2" height="15.0" fill="rgb(213,215,11)" rx="2" ry="2" />
<text  x="995.43" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (43 samples, 0.05%)</title><rect x="1062.8" y="581" width="0.5" height="15.0" fill="rgb(230,10,54)" rx="2" ry="2" />
<text  x="1065.75" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (113 samples, 0.13%)</title><rect x="142.3" y="437" width="1.5" height="15.0" fill="rgb(217,31,13)" rx="2" ry="2" />
<text  x="145.28" y="447.5" ></text>
</g>
<g >
<title>__random_r (925 samples, 1.07%)</title><rect x="202.8" y="677" width="12.6" height="15.0" fill="rgb(244,217,45)" rx="2" ry="2" />
<text  x="205.78" y="687.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (15 samples, 0.02%)</title><rect x="170.3" y="629" width="0.2" height="15.0" fill="rgb(226,65,19)" rx="2" ry="2" />
<text  x="173.31" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (17 samples, 0.02%)</title><rect x="1061.0" y="581" width="0.2" height="15.0" fill="rgb(224,70,7)" rx="2" ry="2" />
<text  x="1063.98" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::deallocate (18 samples, 0.02%)</title><rect x="320.9" y="581" width="0.2" height="15.0" fill="rgb(213,59,9)" rx="2" ry="2" />
<text  x="323.88" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_eq (23 samples, 0.03%)</title><rect x="898.5" y="613" width="0.3" height="15.0" fill="rgb(222,4,33)" rx="2" ry="2" />
<text  x="901.50" y="623.5" ></text>
</g>
<g >
<title>RandomPivot (9 samples, 0.01%)</title><rect x="102.0" y="101" width="0.2" height="15.0" fill="rgb(222,223,43)" rx="2" ry="2" />
<text  x="105.03" y="111.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (17 samples, 0.02%)</title><rect x="151.5" y="485" width="0.2" height="15.0" fill="rgb(219,129,16)" rx="2" ry="2" />
<text  x="154.46" y="495.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (9 samples, 0.01%)</title><rect x="166.1" y="597" width="0.1" height="15.0" fill="rgb(225,112,13)" rx="2" ry="2" />
<text  x="169.08" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (21 samples, 0.02%)</title><rect x="342.5" y="549" width="0.3" height="15.0" fill="rgb(211,160,13)" rx="2" ry="2" />
<text  x="345.49" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (14 samples, 0.02%)</title><rect x="103.3" y="149" width="0.2" height="15.0" fill="rgb(217,122,54)" rx="2" ry="2" />
<text  x="106.33" y="159.5" ></text>
</g>
<g >
<title>_int_free (71 samples, 0.08%)</title><rect x="324.9" y="565" width="0.9" height="15.0" fill="rgb(209,37,54)" rx="2" ry="2" />
<text  x="327.86" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (11 samples, 0.01%)</title><rect x="1023.9" y="549" width="0.1" height="15.0" fill="rgb(227,39,33)" rx="2" ry="2" />
<text  x="1026.85" y="559.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (9 samples, 0.01%)</title><rect x="117.9" y="293" width="0.1" height="15.0" fill="rgb(221,214,8)" rx="2" ry="2" />
<text  x="120.91" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::construct&lt;int, int const&amp;&gt; (160 samples, 0.18%)</title><rect x="1083.7" y="581" width="2.2" height="15.0" fill="rgb(246,36,30)" rx="2" ry="2" />
<text  x="1086.73" y="591.5" ></text>
</g>
<g >
<title>_int_malloc (473 samples, 0.55%)</title><rect x="1111.6" y="709" width="6.4" height="15.0" fill="rgb(224,79,15)" rx="2" ry="2" />
<text  x="1114.56" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (97 samples, 0.11%)</title><rect x="160.0" y="565" width="1.3" height="15.0" fill="rgb(245,17,27)" rx="2" ry="2" />
<text  x="163.00" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;int const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (7,547 samples, 8.72%)</title><rect x="994.4" y="645" width="103.0" height="15.0" fill="rgb(234,191,53)" rx="2" ry="2" />
<text  x="997.45" y="655.5" >std::_Hashta..</text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (32 samples, 0.04%)</title><rect x="1077.7" y="565" width="0.5" height="15.0" fill="rgb(216,214,27)" rx="2" ry="2" />
<text  x="1080.73" y="575.5" ></text>
</g>
<g >
<title>__random_r (12 samples, 0.01%)</title><rect x="123.1" y="325" width="0.2" height="15.0" fill="rgb(218,185,44)" rx="2" ry="2" />
<text  x="126.15" y="335.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (10 samples, 0.01%)</title><rect x="120.5" y="309" width="0.2" height="15.0" fill="rgb(244,91,47)" rx="2" ry="2" />
<text  x="123.52" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_Hash_node_value_base (119 samples, 0.14%)</title><rect x="1074.2" y="581" width="1.6" height="15.0" fill="rgb(219,159,49)" rx="2" ry="2" />
<text  x="1077.21" y="591.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::end (1,750 samples, 2.02%)</title><rect x="234.3" y="677" width="23.9" height="15.0" fill="rgb(211,171,26)" rx="2" ry="2" />
<text  x="237.34" y="687.5" >s..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals (8 samples, 0.01%)</title><rect x="922.0" y="629" width="0.1" height="15.0" fill="rgb(221,131,53)" rx="2" ry="2" />
<text  x="925.04" y="639.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (13 samples, 0.02%)</title><rect x="312.1" y="597" width="0.2" height="15.0" fill="rgb(223,140,6)" rx="2" ry="2" />
<text  x="315.09" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::operator (12 samples, 0.01%)</title><rect x="1098.1" y="645" width="0.1" height="15.0" fill="rgb(235,110,32)" rx="2" ry="2" />
<text  x="1101.06" y="655.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (54 samples, 0.06%)</title><rect x="1086.9" y="597" width="0.8" height="15.0" fill="rgb(223,168,40)" rx="2" ry="2" />
<text  x="1089.92" y="607.5" ></text>
</g>
<g >
<title>QuickSort (7,344 samples, 8.49%)</title><rect x="53.2" y="517" width="100.2" height="15.0" fill="rgb(214,153,13)" rx="2" ry="2" />
<text  x="56.22" y="527.5" >QuickSort</text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (16 samples, 0.02%)</title><rect x="309.5" y="581" width="0.2" height="15.0" fill="rgb(228,146,4)" rx="2" ry="2" />
<text  x="312.51" y="591.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (8 samples, 0.01%)</title><rect x="132.5" y="357" width="0.1" height="15.0" fill="rgb(249,1,15)" rx="2" ry="2" />
<text  x="135.46" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_eq (16 samples, 0.02%)</title><rect x="338.4" y="613" width="0.2" height="15.0" fill="rgb(239,88,39)" rx="2" ry="2" />
<text  x="341.41" y="623.5" ></text>
</g>
<g >
<title>QuickSort (10,482 samples, 12.12%)</title><rect x="31.2" y="677" width="142.9" height="15.0" fill="rgb(240,118,48)" rx="2" ry="2" />
<text  x="34.15" y="687.5" >QuickSort</text>
</g>
<g >
<title>std::swap&lt;int&gt; (56 samples, 0.06%)</title><rect x="148.6" y="485" width="0.7" height="15.0" fill="rgb(221,154,1)" rx="2" ry="2" />
<text  x="151.56" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (294 samples, 0.34%)</title><rect x="515.7" y="645" width="4.0" height="15.0" fill="rgb(225,200,7)" rx="2" ry="2" />
<text  x="518.69" y="655.5" ></text>
</g>
<g >
<title>RandomPivot (1,102 samples, 1.27%)</title><rect x="174.1" y="677" width="15.0" height="15.0" fill="rgb(221,205,14)" rx="2" ry="2" />
<text  x="177.12" y="687.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (15 samples, 0.02%)</title><rect x="1059.5" y="565" width="0.2" height="15.0" fill="rgb(243,171,25)" rx="2" ry="2" />
<text  x="1062.50" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (28 samples, 0.03%)</title><rect x="985.3" y="629" width="0.4" height="15.0" fill="rgb(236,64,19)" rx="2" ry="2" />
<text  x="988.30" y="639.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (9 samples, 0.01%)</title><rect x="131.9" y="373" width="0.1" height="15.0" fill="rgb(243,51,4)" rx="2" ry="2" />
<text  x="134.88" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (86 samples, 0.10%)</title><rect x="113.2" y="261" width="1.2" height="15.0" fill="rgb(233,151,35)" rx="2" ry="2" />
<text  x="116.25" y="271.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (41 samples, 0.05%)</title><rect x="1092.3" y="613" width="0.5" height="15.0" fill="rgb(238,105,28)" rx="2" ry="2" />
<text  x="1095.26" y="623.5" ></text>
</g>
<g >
<title>RandomPivot (9 samples, 0.01%)</title><rect x="103.0" y="149" width="0.1" height="15.0" fill="rgb(232,140,41)" rx="2" ry="2" />
<text  x="105.99" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;, true&gt;::_S_get (55 samples, 0.06%)</title><rect x="1078.9" y="581" width="0.8" height="15.0" fill="rgb(206,218,29)" rx="2" ry="2" />
<text  x="1081.91" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (486 samples, 0.56%)</title><rect x="1001.8" y="613" width="6.6" height="15.0" fill="rgb(214,64,20)" rx="2" ry="2" />
<text  x="1004.76" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Identity, true&gt;::_S_cget (49 samples, 0.06%)</title><rect x="297.1" y="565" width="0.6" height="15.0" fill="rgb(213,162,32)" rx="2" ry="2" />
<text  x="300.07" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Identity, true&gt;::_S_cget (9 samples, 0.01%)</title><rect x="921.0" y="597" width="0.2" height="15.0" fill="rgb(221,179,39)" rx="2" ry="2" />
<text  x="924.04" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (283 samples, 0.33%)</title><rect x="510.2" y="629" width="3.8" height="15.0" fill="rgb(231,53,51)" rx="2" ry="2" />
<text  x="513.16" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (57 samples, 0.07%)</title><rect x="344.3" y="581" width="0.7" height="15.0" fill="rgb(244,198,23)" rx="2" ry="2" />
<text  x="347.26" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (16 samples, 0.02%)</title><rect x="310.7" y="597" width="0.2" height="15.0" fill="rgb(220,145,45)" rx="2" ry="2" />
<text  x="313.72" y="607.5" ></text>
</g>
<g >
<title>QuickSort (3,736 samples, 4.32%)</title><rect x="77.6" y="357" width="51.0" height="15.0" fill="rgb(211,176,17)" rx="2" ry="2" />
<text  x="80.61" y="367.5" >Quick..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (19 samples, 0.02%)</title><rect x="1008.8" y="629" width="0.2" height="15.0" fill="rgb(207,204,54)" rx="2" ry="2" />
<text  x="1011.78" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (38 samples, 0.04%)</title><rect x="343.7" y="581" width="0.6" height="15.0" fill="rgb(245,73,25)" rx="2" ry="2" />
<text  x="346.74" y="591.5" ></text>
</g>
<g >
<title>RandomPivot (33 samples, 0.04%)</title><rect x="114.4" y="277" width="0.5" height="15.0" fill="rgb(212,153,10)" rx="2" ry="2" />
<text  x="117.42" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_S_cget (22 samples, 0.03%)</title><rect x="1050.0" y="565" width="0.3" height="15.0" fill="rgb(230,73,23)" rx="2" ry="2" />
<text  x="1053.04" y="575.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::erase (35 samples, 0.04%)</title><rect x="1106.9" y="693" width="0.4" height="15.0" fill="rgb(230,146,31)" rx="2" ry="2" />
<text  x="1109.87" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_bucket_begin (11 samples, 0.01%)</title><rect x="1011.6" y="629" width="0.1" height="15.0" fill="rgb(212,129,6)" rx="2" ry="2" />
<text  x="1014.59" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (40 samples, 0.05%)</title><rect x="107.9" y="213" width="0.5" height="15.0" fill="rgb(226,85,38)" rx="2" ry="2" />
<text  x="110.90" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (97 samples, 0.11%)</title><rect x="166.2" y="613" width="1.3" height="15.0" fill="rgb(242,61,30)" rx="2" ry="2" />
<text  x="169.20" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (2,415 samples, 2.79%)</title><rect x="279.3" y="613" width="33.0" height="15.0" fill="rgb(246,46,29)" rx="2" ry="2" />
<text  x="282.32" y="623.5" >st..</text>
</g>
<g >
<title>QuickSort (9,209 samples, 10.64%)</title><rect x="40.1" y="613" width="125.6" height="15.0" fill="rgb(230,147,40)" rx="2" ry="2" />
<text  x="43.09" y="623.5" >QuickSort</text>
</g>
<g >
<title>std::swap&lt;int&gt; (28 samples, 0.03%)</title><rect x="155.7" y="533" width="0.4" height="15.0" fill="rgb(236,60,25)" rx="2" ry="2" />
<text  x="158.69" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (100 samples, 0.12%)</title><rect x="137.6" y="405" width="1.4" height="15.0" fill="rgb(229,151,28)" rx="2" ry="2" />
<text  x="140.60" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash_aux (1,986 samples, 2.30%)</title><rect x="1037.6" y="597" width="27.1" height="15.0" fill="rgb(252,3,8)" rx="2" ry="2" />
<text  x="1040.60" y="607.5" >s..</text>
</g>
<g >
<title>std::forward&lt;int&amp;&gt; (45 samples, 0.05%)</title><rect x="344.4" y="565" width="0.6" height="15.0" fill="rgb(254,9,25)" rx="2" ry="2" />
<text  x="347.42" y="575.5" ></text>
</g>
<g >
<title>QuickSort (4,560 samples, 5.27%)</title><rect x="71.9" y="389" width="62.2" height="15.0" fill="rgb(246,198,23)" rx="2" ry="2" />
<text  x="74.93" y="399.5" >QuickS..</text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (114 samples, 0.13%)</title><rect x="132.6" y="373" width="1.5" height="15.0" fill="rgb(207,202,26)" rx="2" ry="2" />
<text  x="135.57" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (395 samples, 0.46%)</title><rect x="1003.0" y="597" width="5.4" height="15.0" fill="rgb(246,207,27)" rx="2" ry="2" />
<text  x="1006.00" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_Hash_node (190 samples, 0.22%)</title><rect x="1073.2" y="597" width="2.6" height="15.0" fill="rgb(208,114,8)" rx="2" ry="2" />
<text  x="1076.24" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (196 samples, 0.23%)</title><rect x="1024.0" y="565" width="2.7" height="15.0" fill="rgb(249,49,14)" rx="2" ry="2" />
<text  x="1027.00" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (40 samples, 0.05%)</title><rect x="1036.5" y="581" width="0.5" height="15.0" fill="rgb(232,182,29)" rx="2" ry="2" />
<text  x="1039.48" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (8,574 samples, 9.91%)</title><rect x="398.7" y="645" width="117.0" height="15.0" fill="rgb(208,36,46)" rx="2" ry="2" />
<text  x="401.75" y="655.5" >std::_Hashtabl..</text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (1,061 samples, 1.23%)</title><rect x="905.1" y="581" width="14.5" height="15.0" fill="rgb(221,34,36)" rx="2" ry="2" />
<text  x="908.10" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (14 samples, 0.02%)</title><rect x="1002.8" y="597" width="0.2" height="15.0" fill="rgb(251,61,23)" rx="2" ry="2" />
<text  x="1005.81" y="607.5" ></text>
</g>
<g >
<title>__random (10 samples, 0.01%)</title><rect x="117.7" y="293" width="0.1" height="15.0" fill="rgb(222,144,16)" rx="2" ry="2" />
<text  x="120.66" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash (2,008 samples, 2.32%)</title><rect x="1037.6" y="613" width="27.4" height="15.0" fill="rgb(221,4,37)" rx="2" ry="2" />
<text  x="1040.60" y="623.5" >s..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (39 samples, 0.05%)</title><rect x="347.4" y="597" width="0.5" height="15.0" fill="rgb(212,10,5)" rx="2" ry="2" />
<text  x="350.36" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (21 samples, 0.02%)</title><rect x="352.4" y="629" width="0.3" height="15.0" fill="rgb(250,183,25)" rx="2" ry="2" />
<text  x="355.40" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (17 samples, 0.02%)</title><rect x="104.1" y="165" width="0.3" height="15.0" fill="rgb(254,184,0)" rx="2" ry="2" />
<text  x="107.12" y="175.5" ></text>
</g>
<g >
<title>TestPerf (86,518 samples, 100.00%)</title><rect x="10.0" y="725" width="1180.0" height="15.0" fill="rgb(231,229,52)" rx="2" ry="2" />
<text  x="13.00" y="735.5" >TestPerf</text>
</g>
<g >
<title>std::addressof&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; (16 samples, 0.02%)</title><rect x="322.4" y="581" width="0.3" height="15.0" fill="rgb(225,111,8)" rx="2" ry="2" />
<text  x="325.44" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (5,650 samples, 6.53%)</title><rect x="433.1" y="613" width="77.1" height="15.0" fill="rgb(234,202,30)" rx="2" ry="2" />
<text  x="436.10" y="623.5" >std::__d..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,420 samples, 1.64%)</title><rect x="1041.6" y="581" width="19.4" height="15.0" fill="rgb(235,144,30)" rx="2" ry="2" />
<text  x="1044.61" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;int const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (18 samples, 0.02%)</title><rect x="992.2" y="661" width="0.2" height="15.0" fill="rgb(249,160,6)" rx="2" ry="2" />
<text  x="995.18" y="671.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (42 samples, 0.05%)</title><rect x="143.9" y="453" width="0.6" height="15.0" fill="rgb(226,200,8)" rx="2" ry="2" />
<text  x="146.91" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_conjure_hashtable (9 samples, 0.01%)</title><rect x="1098.9" y="645" width="0.1" height="15.0" fill="rgb(237,193,42)" rx="2" ry="2" />
<text  x="1101.92" y="655.5" ></text>
</g>
<g >
<title>RandomPivot (8 samples, 0.01%)</title><rect x="134.1" y="389" width="0.1" height="15.0" fill="rgb(205,86,0)" rx="2" ry="2" />
<text  x="137.13" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (64 samples, 0.07%)</title><rect x="1021.8" y="565" width="0.8" height="15.0" fill="rgb(212,62,29)" rx="2" ry="2" />
<text  x="1024.75" y="575.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::end (276 samples, 0.32%)</title><rect x="1103.1" y="693" width="3.8" height="15.0" fill="rgb(243,61,30)" rx="2" ry="2" />
<text  x="1106.11" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (15 samples, 0.02%)</title><rect x="300.3" y="549" width="0.2" height="15.0" fill="rgb(235,45,14)" rx="2" ry="2" />
<text  x="303.26" y="559.5" ></text>
</g>
<g >
<title>QuickSort (745 samples, 0.86%)</title><rect x="96.8" y="213" width="10.2" height="15.0" fill="rgb(235,30,16)" rx="2" ry="2" />
<text  x="99.80" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (66 samples, 0.08%)</title><rect x="1022.6" y="565" width="0.9" height="15.0" fill="rgb(216,50,42)" rx="2" ry="2" />
<text  x="1025.62" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;, true&gt;::_S_get (18 samples, 0.02%)</title><rect x="1079.7" y="597" width="0.2" height="15.0" fill="rgb(208,103,32)" rx="2" ry="2" />
<text  x="1082.66" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Identity, true&gt;::_S_cget (38 samples, 0.04%)</title><rect x="1022.1" y="549" width="0.5" height="15.0" fill="rgb(210,170,23)" rx="2" ry="2" />
<text  x="1025.11" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_S_cget (35 samples, 0.04%)</title><rect x="1091.6" y="597" width="0.5" height="15.0" fill="rgb(212,165,33)" rx="2" ry="2" />
<text  x="1094.61" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="1037.3" y="597" width="0.2" height="15.0" fill="rgb(243,5,28)" rx="2" ry="2" />
<text  x="1040.34" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (111 samples, 0.13%)</title><rect x="144.5" y="453" width="1.5" height="15.0" fill="rgb(233,124,46)" rx="2" ry="2" />
<text  x="147.48" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Identity, true&gt;::_S_get (9 samples, 0.01%)</title><rect x="1093.1" y="629" width="0.1" height="15.0" fill="rgb(221,28,20)" rx="2" ry="2" />
<text  x="1096.08" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (12 samples, 0.01%)</title><rect x="985.7" y="645" width="0.1" height="15.0" fill="rgb(228,20,23)" rx="2" ry="2" />
<text  x="988.68" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_remove_bucket_begin (19 samples, 0.02%)</title><rect x="349.4" y="629" width="0.2" height="15.0" fill="rgb(222,68,40)" rx="2" ry="2" />
<text  x="352.37" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node_ptr (44 samples, 0.05%)</title><rect x="332.8" y="613" width="0.6" height="15.0" fill="rgb(217,83,13)" rx="2" ry="2" />
<text  x="335.76" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (4,028 samples, 4.66%)</title><rect x="1011.7" y="629" width="55.0" height="15.0" fill="rgb(214,202,51)" rx="2" ry="2" />
<text  x="1014.74" y="639.5" >std::..</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;int&gt;, true&gt;::_S_cget (10 samples, 0.01%)</title><rect x="348.6" y="597" width="0.2" height="15.0" fill="rgb(245,20,14)" rx="2" ry="2" />
<text  x="351.62" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Identity, true&gt;::_S_cget (19 samples, 0.02%)</title><rect x="1027.0" y="565" width="0.2" height="15.0" fill="rgb(236,97,40)" rx="2" ry="2" />
<text  x="1029.98" y="575.5" ></text>
</g>
<g >
<title>QuickSort (2,135 samples, 2.47%)</title><rect x="88.2" y="293" width="29.1" height="15.0" fill="rgb(232,175,21)" rx="2" ry="2" />
<text  x="91.20" y="303.5" >Qu..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (30 samples, 0.03%)</title><rect x="919.6" y="597" width="0.4" height="15.0" fill="rgb(232,151,34)" rx="2" ry="2" />
<text  x="922.62" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (22 samples, 0.03%)</title><rect x="1024.8" y="549" width="0.3" height="15.0" fill="rgb(243,91,24)" rx="2" ry="2" />
<text  x="1027.83" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (91 samples, 0.11%)</title><rect x="1074.6" y="565" width="1.2" height="15.0" fill="rgb(234,81,51)" rx="2" ry="2" />
<text  x="1077.59" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::allocate (18 samples, 0.02%)</title><rect x="1088.4" y="613" width="0.3" height="15.0" fill="rgb(229,57,15)" rx="2" ry="2" />
<text  x="1091.42" y="623.5" ></text>
</g>
<g >
<title>main (79,704 samples, 92.12%)</title><rect x="14.1" y="693" width="1087.0" height="15.0" fill="rgb(233,101,41)" rx="2" ry="2" />
<text  x="17.05" y="703.5" >main</text>
</g>
<g >
<title>QuickSort (294 samples, 0.34%)</title><rect x="99.5" y="165" width="4.0" height="15.0" fill="rgb(235,199,26)" rx="2" ry="2" />
<text  x="102.51" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (1,069 samples, 1.24%)</title><rect x="334.8" y="629" width="14.6" height="15.0" fill="rgb(212,169,54)" rx="2" ry="2" />
<text  x="337.79" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (38 samples, 0.04%)</title><rect x="1044.8" y="565" width="0.5" height="15.0" fill="rgb(244,14,12)" rx="2" ry="2" />
<text  x="1047.83" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Identity, true&gt;::_S_cget (12 samples, 0.01%)</title><rect x="919.9" y="581" width="0.1" height="15.0" fill="rgb(238,83,48)" rx="2" ry="2" />
<text  x="922.87" y="591.5" ></text>
</g>
<g >
<title>QuickSort (7,653 samples, 8.85%)</title><rect x="51.2" y="533" width="104.4" height="15.0" fill="rgb(247,186,52)" rx="2" ry="2" />
<text  x="54.18" y="543.5" >QuickSort</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (183 samples, 0.21%)</title><rect x="430.6" y="613" width="2.5" height="15.0" fill="rgb(243,167,39)" rx="2" ry="2" />
<text  x="433.61" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (12 samples, 0.01%)</title><rect x="274.4" y="613" width="0.2" height="15.0" fill="rgb(211,188,15)" rx="2" ry="2" />
<text  x="277.43" y="623.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (20 samples, 0.02%)</title><rect x="109.2" y="229" width="0.3" height="15.0" fill="rgb(211,35,9)" rx="2" ry="2" />
<text  x="112.18" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, unsigned long, false&gt;::_S_equals (22 samples, 0.03%)</title><rect x="897.9" y="613" width="0.3" height="15.0" fill="rgb(242,10,10)" rx="2" ry="2" />
<text  x="900.94" y="623.5" ></text>
</g>
<g >
<title>__random (9 samples, 0.01%)</title><rect x="120.1" y="309" width="0.2" height="15.0" fill="rgb(208,199,25)" rx="2" ry="2" />
<text  x="123.13" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (51 samples, 0.06%)</title><rect x="1062.1" y="581" width="0.7" height="15.0" fill="rgb(224,172,2)" rx="2" ry="2" />
<text  x="1065.05" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (103 samples, 0.12%)</title><rect x="350.1" y="629" width="1.4" height="15.0" fill="rgb(228,139,4)" rx="2" ry="2" />
<text  x="353.06" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (29,508 samples, 34.11%)</title><rect x="519.7" y="645" width="402.4" height="15.0" fill="rgb(241,197,50)" rx="2" ry="2" />
<text  x="522.69" y="655.5" >std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (1,256 samples, 1.45%)</title><rect x="922.1" y="645" width="17.2" height="15.0" fill="rgb(234,49,24)" rx="2" ry="2" />
<text  x="925.15" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (18 samples, 0.02%)</title><rect x="1035.3" y="581" width="0.3" height="15.0" fill="rgb(213,21,54)" rx="2" ry="2" />
<text  x="1038.35" y="591.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__detail::_Node_iterator&lt;int, true, false&gt; &gt; (18 samples, 0.02%)</title><rect x="1097.1" y="613" width="0.3" height="15.0" fill="rgb(209,175,37)" rx="2" ry="2" />
<text  x="1100.13" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (87 samples, 0.10%)</title><rect x="118.6" y="293" width="1.2" height="15.0" fill="rgb(237,22,30)" rx="2" ry="2" />
<text  x="121.62" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (32 samples, 0.04%)</title><rect x="311.6" y="597" width="0.4" height="15.0" fill="rgb(224,76,31)" rx="2" ry="2" />
<text  x="314.57" y="607.5" ></text>
</g>
<g >
<title>std::forward&lt;int&amp;&gt; (11 samples, 0.01%)</title><rect x="346.9" y="581" width="0.1" height="15.0" fill="rgb(209,190,49)" rx="2" ry="2" />
<text  x="349.86" y="591.5" ></text>
</g>
<g >
<title>__libc_start_main (80,627 samples, 93.19%)</title><rect x="11.9" y="709" width="1099.7" height="15.0" fill="rgb(222,94,34)" rx="2" ry="2" />
<text  x="14.91" y="719.5" >__libc_start_main</text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (308 samples, 0.36%)</title><rect x="981.5" y="645" width="4.2" height="15.0" fill="rgb(250,45,16)" rx="2" ry="2" />
<text  x="984.48" y="655.5" ></text>
</g>
</g>
</svg>
